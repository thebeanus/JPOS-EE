<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="3"?>
<?asciidoc-numbered maxdepth="5"?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>jPOS Extended Edition</title>
<date>2022-09-10</date>
<author>
<personname>
<firstname>jPOS</firstname>
<othername>Software</othername>
<surname>SRL</surname>
</personname>
<email>support@jpos.org</email>
</author>
<authorinitials>jSS</authorinitials>
<revhistory>
<revision>
<revnumber>2.2.9-SNAPSHOT</revnumber>
<date>2022-09-10</date>
<authorinitials>jSS</authorinitials>
</revision>
</revhistory>
<releaseinfo>jPOS-EE 2.2.7-SNAPSHOT</releaseinfo>
<authorgroup>
<author>
	<firstname>Alejandro</firstname>
	<surname>Revilla</surname>
	<affiliation>
		<orgname>jPOS Consulting</orgname>
	</affiliation>
</author>
<author>
	<firstname>Victor</firstname>
	<surname>Salaman</surname>
	<affiliation>
		<orgname>VMAN Technologies, Inc.</orgname>
	</affiliation>
</author>
</authorgroup>
<pubdate>2015</pubdate>
<copyright><year>2000-2015</year>
<holder>Alejandro P. Revilla d/b/a jPOS.org</holder>
</copyright>

<legalnotice>
<para>
All rights reserved. No part of this document may be reproduced in
any form or by any electronic or mechanical means, including
information storage and retrieval systems, without permission in
writing from Alejandro P. Revilla, company number\# 212 752 380
016, Uruguay, except by a reviewer who may quote brief passages in
a review.
</para>
</legalnotice>

</info>
<part xml:id="_introduction">
<title>Introduction</title>
<chapter xml:id="_project_overview">
<title>Project Overview</title>
<section xml:id="_background">
<title>Background</title>
<simpara>Back in the late nineties, our company was awarded the development of a
jPOS-based application for our local VISANet <footnote><simpara>Visanet/Uruguay <link xl:href="http://visanet.com.uy">http://visanet.com.uy</link></simpara></footnote>
acquirer.</simpara>
<simpara>At that time, we thought that going for a J2EE solution was the way to
go. We went with the great Orion application server and we called the application
<emphasis role="strong">jPOS-EE</emphasis>, it was kind of a jPOS "Enterprise" Edition.</simpara>
<simpara>But we soon got to hit some of the major problems of running an early
J2EE application in a demanding 7x24x365 environment, the deployment of
new versions was both stressful and costly in terms of time (a one
minute downtime can feel like a week when you are manning the telephones
 in a call center). So we designed a lightweight solution that we could
deploy and redeploy quickly, without obscure RMI-IIOP related issues
that could only be solved with an application server restart.</simpara>
<simpara>In addition, we started to see how O/R mapping tools such as Hibernate
offered greater sophistication than EJB 2.1 could offer, and EJB 3.0 was
not on the horizon yet.</simpara>
<simpara>So we decided to build our own tiny environment and began by building
<emphasis role="strong">Q2</emphasis>, our JMX-based IoC micro kernel. <footnote><simpara>Q2 is QSP version 2, described in the jPOS Programmer&#8217;s Guide</simpara></footnote></simpara>
<simpara>We consider jPOS-EE as a <emphasis role="strong">Meta-Project</emphasis> where we encompass many other
compatible (from a technical as well as license perspective) Open Source
projects such as:</simpara>
<itemizedlist>
<listitem>
<simpara>Hibernate</simpara>
</listitem>
<listitem>
<simpara>Jetty</simpara>
</listitem>
<listitem>
<simpara>Velocity</simpara>
</listitem>
<listitem>
<simpara>XStream</simpara>
</listitem>
<listitem>
<simpara>JDOM</simpara>
</listitem>
<listitem>
<simpara>JDBM</simpara>
</listitem>
<listitem>
<simpara>Apache Commons</simpara>
</listitem>
<listitem>
<simpara>Etcetera</simpara>
</listitem>
</itemizedlist>
<simpara>In order to easily assemble different types of jPOS-EE applications
whilst fostering code reuse as much as possible, we have developed a
very simple, module-based jPOS-EE Software Development Kit (jPOS-EE
SDK), now replaced by Gradle <footnote><simpara>Gradle Project <link xl:href="http://gradle.org/">http://gradle.org/</link></simpara></footnote>.</simpara>
<simpara>We kept the name jPOS-EE, but we replaced the first E from Enterprise to
Extended. This document describes the <emphasis role="strong">jPOS Extended Edition</emphasis>.</simpara>
<simpara>We don&#8217;t claim that using the jPOS-EE framework and our choice of
supporting projects is the best way to write a jPOS application, people
could argue that JEE is the way to go, or Spring is the way to go, or
Pico/Nano container does better IoC, or that we should use
JBoss/Jeronimo, Guice, OSGI, QI4J, you name
it. In the same way, we choose to use Jetty but there&#8217;s people that may
say that Tomcat is the way to go.</simpara>
<simpara>jPOS-EE is just the way we at jPOS.org write our applications and we are
sharing this "technology" on an as-is basis. You can use it, or you can
write your jPOS application using whatever technology/framework you feel
more comfortable with.</simpara>
</section>
<section xml:id="_about_this_document">
<title>About this document</title>
<simpara>This is the official jPOS-EE documentation that intends to
aggregate everything related to jPOS-EE, including but not limited to:
its objectives, specifications, schedule, priorities, organizational
chart, road map, change log, coding conventions, core modules, optional
modules, license information, etc.</simpara>
<simpara>It complements, but doesn&#8217;t replace the
<link xl:href="http://jpos.org/products/proguide">jPOS Programmer&#8217;s Guide</link>. It is not a
user guide nor a tutorial, it is a development master workbook, written
by developers for developers.</simpara>
<simpara>You&#8217;re currently reading revision 2.2.9-SNAPSHOT.</simpara>
<simpara>New versions of this document are regularly posted in
<link xl:href="http://jpos.org/doc/jPOS-EE.pdf">jpos.org/doc/jPOS-EE.pdf</link>.</simpara>
</section>
<section xml:id="_objectives">
<title>Objectives</title>
<simpara>Our main objective is to avoid repeating ourselves. <emphasis role="strong">DRY</emphasis>
<footnote><simpara>Do not repeat yourself</simpara></footnote> is a good paradigm to keep in mind.</simpara>
<simpara>We at jPOS.org have a small company with very limited development
resources and a large number of customers. Most of our end user
applications are very specific, yet they share a large number of
features.</simpara>
<simpara>jPOS-EE is all about code reuse. We developed a very simple SDK based on
a pluggable module architecture that can be bundled together at compile
time to create&#8201;&#8212;&#8201;as fast as possible&#8201;&#8212;&#8201;highly reliable jPOS
applications.</simpara>
<simpara>The more we use jPOS-EE to create applications for our customers, the
more we tend to make these modules smaller, with as few
dependencies on each other as possible.</simpara>
<simpara>We expect developers using jPOS-EE to create their own modules based
upon our public ones, and to interact with the jPOS-EE community in
order to engage into the formal process of requesting changes to the jPOS-EE
codebase whenever it is deemed necessary.</simpara>
<tip>
<simpara>Local changes to the jPOS-EE code base may seem the easy way to solve a
given requirement, but it forces you to apply the same change over and
over as new jPOS-EE versions become available.</simpara>
<simpara>We encourage you to go the formal route and send us a pull request
that can be included in jPOS-EE, reviewed by other jPOS-EE developers,
tested in multiple platforms and disparate environments, properly
documented and maintained in future releases.</simpara>
</tip>
</section>
<section xml:id="_copyright_and_license">
<title>Copyright and License</title>
<simpara>jPOS-EE is copyrighted code licensed under the GNU Affero General Public
License version 3.</simpara>
<simpara>A copy of the copyright notice is available in every source file and can
be found in link <xref linkend="appendix_copyright"/>.</simpara>
<simpara>A copy of the GNU Affero General Public License version 3 is also
available in <xref linkend="appendix_license"/>.</simpara>
<simpara>We strongly recommend you to review our license terms before using jPOS
or jPOS-EE. You can find very useful information in the official Free
Software Foundation GPL FAQ page
(<link xl:href="http://www.fsf.org/licensing/licenses/gpl-faq.html">www.fsf.org/licensing/licenses/gpl-faq.html</link>).</simpara>
<simpara>The AGPL covers applications that runs over the network (SaaS) such as
most credit/debit card verification/authorization systems like those
deployed by most people using jPOS, meaning that you probably need a
commercial license.</simpara>
<simpara>If in doubt, you can contact us using
<link xl:href="http://jpos.org/contact?p=EECL">jpos.org/contact</link></simpara>
</section>
<section xml:id="_getting_involved">
<title>Getting involved</title>
<simpara>jPOS-EE is a centralized open source project. jPOS.org retain full
control of the release cycle because the code placed in the jposee
repository is regularly checked out by our production customers.</simpara>
<simpara>Whilst we have experimental modules, and a sandbox/incoming area where
we can put alpha and even PoC code, there are fundamental modules that
we use over and over at production sites. These modules may have been
audited or even certified by third parties and we can&#8217;t afford to modify
them without being absolutely sure of their impact in the rest of the systems.</simpara>
<simpara>That said, we are very happy to accept contributions, and publish them
for review by the jPOS-EE community.</simpara>
<simpara>We license jPOS-EE commercially, so companies or individuals willing to
include code in the jPOS-EE distribution will need to sign a CLA (see
<xref linkend="appendix_CLA"/>) and
if working for a company, a CCLA agreement (see <xref linkend="appendix_CCLA"/>) as well.</simpara>
<simpara>The best way to stay up-to-date with jPOS and jPOS-EE is to monitor the
following resources:</simpara>
<itemizedlist>
<listitem>
<simpara><link xl:href="http://feeds.feedburner.com/jpos">The jPOS Blog</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://feeds.feedburner.com/jpos-commits">jPOS and jPOS-EE commit
notifications</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://groups.google.com/group/jpos-users/feed/msgs.xml">jPOS users
forum</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://rss.gmane.org/gmane.comp.java.jpos.devel">jPOS developers forum</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="http://twitter.com/jposcommits">@jposcommits</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://jpos.org/issues/issues/jPOS-EE">Issue Tracker</link></simpara>
</listitem>
<listitem>
<simpara>If tweeting about jPOS, please use the <link xl:href="https://twitter.com/search?q=%23jPOS">#jPOS</link> hashtag</simpara>
</listitem>
</itemizedlist>
<tip>
<title>Resources Page</title>
<simpara>There is a handy <link xl:href="http://jpos.org/resources">jpos.org/resources</link> page at our website.</simpara>
</tip>
</section>
</chapter>
<chapter xml:id="_contributing_to_the_project">
<title>Contributing to the project</title>
<simpara>This project uses Fork &amp; Pull collaborative development model
as described in: <link xl:href="https://help.github.com/articles/using-pull-requests">https://help.github.com/articles/using-pull-requests</link>.</simpara>
<simpara>The following sections provide the guidelines to follow before a contribution
is made to the project.</simpara>
<section xml:id="_github_workflow">
<title>GitHub Workflow</title>
<section xml:id="_quickfire_dos_and_donts">
<title>Quickfire Do&#8217;s and Don&#8217;t&#8217;s</title>
<simpara>If you&#8217;re familiar with git and GitHub, here&#8217;s the short version of what you need to know.
Once you fork and clone the jPOS-EE code:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">Don&#8217;t develop on the master branch</emphasis>. Always create a development branch specific to
the issue (see <link xl:href="https://jpos.org/issues/issues/jPOS-EE">https://jpos.org/issues/issues/jPOS-EE</link>) you&#8217;re working on. Name it by issue # and description.
For example, if you&#8217;re working on Issue jPOS-EE-359, an aspect naming fix, your development branch
should be called jPOS-EE-359-aspect-names. If you decide to work on another issue mid-stream,
create a new branch for that issue&#8212;&#8203;don&#8217;t work on both in one branch.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">Do not merge the upstream master with your development branch</emphasis>;
rebase your branch on top of the upstream master.</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">A single development branch should represent changes related to a single issue.</emphasis>
If you decide to work on another issue, create another branch.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_step_by_step_the_short_version">
<title>Step-by-step (the short version)</title>
<itemizedlist>
<listitem>
<simpara>Fork on GitHub (click Fork button)</simpara>
</listitem>
<listitem>
<simpara>Clone to computer (<literal>$ git clone git@github.com:~you~/jPOS-EE.git</literal>)</simpara>
</listitem>
<listitem>
<simpara>Don&#8217;t forget to cd into your repo: (<literal>$ cd jPOS-EE/</literal>)</simpara>
</listitem>
<listitem>
<simpara>Set up remote upstream (<literal>$ git remote add upstream git://github.com/jpos/jPOS-EE.git</literal>)</simpara>
</listitem>
<listitem>
<simpara>Create a branch for new issue (<literal>$ git checkout -b 100-new-feature</literal>,
if you don&#8217;t have a bug report no worries just skip the number)</simpara>
</listitem>
<listitem>
<simpara>Develop on issue branch. [Time passes, the main jPOS repository accumulates new commits]</simpara>
</listitem>
<listitem>
<simpara>Commit changes to issue branch. (<literal>$ git add . ; git commit</literal>)</simpara>
</listitem>
<listitem>
<simpara>Fetch upstream (<literal>$ git fetch upstream</literal>)</simpara>
</listitem>
<listitem>
<simpara>Update local master (<literal>$ git checkout master; git pull upstream master</literal>)</simpara>
</listitem>
<listitem>
<simpara>Repeat steps 5-8 till dev is complete</simpara>
</listitem>
<listitem>
<simpara>Rebase issue branch (<literal>$ git checkout 100-new-feature; git rebase master</literal>)</simpara>
</listitem>
<listitem>
<simpara>Push branch to GitHub (<literal>$ git push origin 100-new-feature</literal>)</simpara>
</listitem>
<listitem>
<simpara>Issue pull request (Click Pull Request button)</simpara>
</listitem>
</itemizedlist>
<simpara>Extra reading material on forking can be found at : <link xl:href="http://gun.io/blog/how-to-github-fork-branch-and-pull-request/">http://gun.io/blog/how-to-github-fork-branch-and-pull-request/</link></simpara>
<note>
<simpara>Item 11 (rebase) in the previous list is very often forgotten, but it&#8217;s
extremely important. Be kind with the rest of the team and do it.
Read this <link xl:href="http://www.mail-archive.com/dri-devel@lists.sourceforge.net/msg39091.html">post by Git author Linus Torvalds</link>
to understand why.</simpara>
</note>
</section>
<section xml:id="_commit_messages">
<title>Commit messages</title>
<simpara>Please read <link xl:href="http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html">http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html</link> for
guidelines in creating good commit messages.</simpara>
</section>
</section>
<section xml:id="_coding_conventions">
<title>Coding conventions</title>
<simpara>We adhere to standard
<link xl:href="http://www.oracle.com/technetwork/java/codeconventions-150003.pdf">Sun&#8217;s java &#174;
coding conventions</link> for the Java Language, that among other things it
specifies: Four spaces should be used as the unit of indentation. The
exact construction of the indentation (spaces vs. tabs) is unspecified.
Tabs must be set exactly every 8 spaces (not 4).</simpara>
<simpara>Due to our revision control system, we also need that hard tabs (ASCII
0x09) are not used in source code and configuration files (in order for
diff to work properly among platforms).</simpara>
<simpara>For <emphasis>vi</emphasis> users, we are using the following .vimrc:</simpara>
<screen>      set ts=8
      set sts=4
      set sw=4
      set expandtab</screen>
<simpara>For your Git commits and pull requests, we recommend you normalize your
end of lines. This is specially important if you use a Windows platform.</simpara>
<screen>git config --global core.autocrlf input</screen>
<tip>
<simpara>Eclipse users, go to Preferences -&gt; Java -&gt; Editor -&gt; Typing and check the
<emphasis>Insert space for tabs</emphasis> checkbox.</simpara>
</tip>
</section>
</chapter>
<chapter xml:id="_getting_started">
<title>Getting Started</title>
<section xml:id="_prerequisites">
<title>Prerequisites</title>
<simpara>jPOS-EE-SDK assumes that the following software is installed in your
development environment:</simpara>
<itemizedlist>
<listitem>
<simpara>JDK 1.8 or higher</simpara>
</listitem>
<listitem>
<simpara>A git client</simpara>
</listitem>
</itemizedlist>
<simpara>While jPOS and jPOS-EE can be used in a Windows environment, we develop
it in an Unix environment, so you&#8217;ll find many useful Unix scripts
with no Windows counterpart. If you use windows, you may choose to install
a Unix-like environment such as <link xl:href="http://www.cygwin.com">Cygwin</link> so you can
make use of the unix scripts directly.</simpara>
</section>
<section xml:id="_using_an_ide">
<title>Using an IDE</title>
<simpara>jPOS-EE is known to work with most modern IDEs such as Eclipse,
NetBeans, Jetbrain&#8217;s IDEA&#174;. The Gradle configuration uses the
IDEA and Eclipse plugins allowing you to create suitable IDE
configurations by running <literal>gradle idea</literal> or <literal>gradle eclipse</literal>.</simpara>
</section>
<section xml:id="_using_an_application_server">
<title>Using an application server</title>
<simpara>jPOS-EE is a stand-alone application that runs off jPOS' Q2 container.</simpara>
<simpara>We are aware that there are companies and institutions that standardize
on using a given application server or JEE container. That&#8217;s great, but
jPOS-EE is a stand-alone application. If you master your application
server, you will certainly be able to integrate jPOS-EE, either as a
client EJB application, as a Resource Adapter, a WAR, EAR, etc. In
addition, some application servers have proprietary extensions that
facilitates such integration.</simpara>
<simpara>But let us repeat this one more time. jPOS-EE is a stand alone
application. If you know how to run it inside application server XYZ,
that&#8217;s perfect; if we can make your life easier by doing something on
our end that makes that integration easier, and you have the expertise
in both jPOS-EE and your application server to provide us detailed
instructions on what you need, and the changes won&#8217;t break any existing
jPOS or jPOS-EE functionality, then we are willing to do so, but if you
decide to go that route, you&#8217;ll be on your own.</simpara>
</section>
<section xml:id="_preparing_your_environment">
<title>Preparing your environment</title>
<simpara>In this chapter we will work through setting up the development environment consisting of:</simpara>
<itemizedlist>
<listitem>
<simpara>Downloading the jPOS-EE SDK source code using Git.</simpara>
</listitem>
<listitem>
<simpara>Compiling and installing the components locally on your system.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_maven_coordinates">
<title>Maven coordinates</title>
<simpara>jPOS-EE modules are regularly published to jPOS' maven repository. You can use its
dependencies by adding</simpara>
<literallayout class="monospaced">&lt;repository&gt;
    &lt;id&gt;jpos-ee&lt;/id&gt;
    &lt;name&gt;jPOS Maven Repository&lt;/name&gt;
    &lt;url&gt;http://jpos.org/maven&lt;/url&gt;
&lt;/repository&gt;</literallayout>
<simpara>to your Maven or</simpara>
<literallayout class="monospaced">repositories {
    ...
    maven { url 'http://jpos.org/maven' }
    ...
}</literallayout>
<simpara>to your Gradle configuration.</simpara>
<tip>
<simpara>We recommend you use the <link xl:href="https://github.com/jpos/jPOS-template">jPOS Template</link>,
in particular its <literal>multimodule</literal> branch when building jPOS-EE based applications.</simpara>
</tip>
</section>
<section xml:id="_downloading_the_sources">
<title>Downloading the sources</title>
<simpara>In order to get a copy of it, and keep your copy up-to-date with
the latest revision, you need to use a Git client.</simpara>
<simpara>Git installation instructions for Windows, Linux and MacOS X are available here:
<link xl:href="http://help.github.com/set-up-git-redirect">Git Setup</link>.</simpara>
<simpara>jPOS-EE is hosted at <link xl:href="https://github.com/jpos/jPOS-EE">GitHub</link>. By visiting
the project page you will be provided information on how to Checkout,
Browse and see a history of changes to the system.</simpara>
<simpara>If you are on an Unix/Unix-like environment, an initial checkout would
look something like :-</simpara>
<screen>$ git clone https://github.com/jpos/jPOS-EE.git
Cloning into 'jPOS-EE'...
remote: Counting objects: 627, done.
remote: Compressing objects: 100% (355/355), done.
remote: Total 627 (delta 250), reused 528 (delta 151)
Receiving objects: 100% (627/627), 127.72 KiB, done.
Resolving deltas: 100% (250/250), done.
$</screen>
<simpara>This will create a new directory <quote>jPOS-EE</quote> containing a clone of what&#8217;s currently in the master branch at our central GitHub repository.</simpara>
</section>
<section xml:id="_installing_the_sdk">
<title>Installing the SDK</title>
<simpara>If you&#8217;re not using jPOS Maven repo, you can install your dependencies locally
by calling:</simpara>
<literallayout class="monospaced">gradle install</literallayout>
<simpara>If your build completes with <quote>BUILD SUCCESSFUL</quote> , you are ready to proceed to create your first project!</simpara>
<note>
<simpara>Gradle just built and installed all of its components into your local Maven
repository, where they can be accessed by any of your projects.</simpara>
<simpara>If you have made local changes to the jPOS-EE sources, followed by a call
to <literal>gradle install</literal>, make sure that your <literal>mavenLocal()</literal> repository comes
<emphasis role="strong">before</emphasis> <literal>http://jpos.org/maven</literal> in your repository list so that dependencies
are taken from your local <literal>$HOME/.m2/repository</literal> directory.</simpara>
<simpara>Please note that while this is OK during development, it&#8217;s a bad practice
if you expect to produce repeatable builds.</simpara>
</note>
</section>
<section xml:id="_five_minute_tutorial">
<title>Five minute tutorial</title>
<section xml:id="_initial_setup_jpos_project">
<title>Initial setup, jPOS project</title>
<simpara>Once you have jPOS-EE installed, in order to create your own project,
you can take advantage of our companion <quote>jPOS Template</quote>.</simpara>
<simpara>Download the latest copy of the jPOS Template
in <literal>zip</literal> (<link xl:href="https://github.com/jpos/jPOS-template/archive/master.zip">https://github.com/jpos/jPOS-template/archive/master.zip</link>)
or <literal>tar.gz</literal> format (<link xl:href="https://github.com/jpos/jPOS-template/archive/master.tar.gz">https://github.com/jpos/jPOS-template/archive/master.tar.gz</link>).</simpara>
<simpara>Move the directory <literal>jPOS-template-master</literal> into your desired project name, i.e.: <quote>myjposproject</quote>.</simpara>
<simpara>For an initial sanity test, let&#8217;s build a simple jPOS application first before moving to jPOS-EE.</simpara>
<simpara>Call <literal>gradle installApp</literal> (or <literal>gradlew installApp</literal> if you don&#8217;t have Gradle installed)</simpara>
<simpara>Then go to the directory <literal>build/install/myjposproject/bin</literal> and you will find a script called <literal>q2</literal>
(along with a Windows version <literal>q2.bat</literal>). Running it should start jPOS, that you can stop using <literal>Ctrl-C</literal>.</simpara>
<simpara>Here is a full transcript of this session:</simpara>
<screen>$ cd /tmp
$ wget https://github.com/jpos/jPOS-template/archive/master.tar.gz
...
...
Saving to: `master.tar.gz'

$ tar zxvf master.tar.gz
x jPOS-template-master/
x jPOS-template-master/.gitignore
x jPOS-template-master/COPYRIGHT
x jPOS-template-master/LICENSE
x jPOS-template-master/README.md
x jPOS-template-master/build.gradle
x jPOS-template-master/gradle/
...
...
...

$ mv jPOS-template-master myjposproject
$ cd myjposproject
$ ./gradlew installApp
:compileJava UP-TO-DATE
:processResources UP-TO-DATE
:classes UP-TO-DATE
:jar
:installApp

BUILD SUCCESSFUL

$ build/install/myjposproject/bin/q2

...
...
&lt;log realm="Q2.system" at="Fri Jan 25 18:30:37 UYST 2013.335"&gt;
  &lt;info&gt;
   deploy:/private/tmp/myjposproject/build/install/myjposproject/deploy/99_sysmon.xml
  &lt;/info&gt;
&lt;/log&gt;
...
...</screen>
<simpara>The jPOS template creates a standard jPOS application with its
<literal>lib</literal>, <literal>deploy</literal>, <literal>cfg</literal> and <literal>log</literal> directories that you can review in the
<literal>build/install/myjposproject</literal> directory.</simpara>
</section>
<section xml:id="_adding_a_jpos_ee_module">
<title>Adding a jPOS-EE Module</title>
<simpara>Now lets add a jPOS-EE module. We&#8217;ll start with a simple one, the <link linkend="server-simulator">Server Simulator</link>.</simpara>
<simpara>Edit <literal>build.gradle</literal> and add the following dependency:</simpara>
<screen>compile group:'org.jpos.ee',
   name:'jposee-server-simulator',
   version:'2.0.2-SNAPSHOT'</screen>
<simpara>so that the dependencies would look like this:</simpara>
<screen>dependencies {
    compile group:'org.jpos', name:'jpos', version:'1.9.2'
    compile group:'org.jpos.ee',
      name:'jposee-server-simulator',
      version:'2.0.2-SNAPSHOT'
    testCompile group:'junit', name:'junit', version:'4.8.2'
}</screen>
<simpara>If you build again the system by calling <literal>gradle installApp</literal> and you
review the generated <literal>lib</literal> directory now in <literal>build/install/myjposproject/lib</literal>
you&#8217;ll see two new libraries:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>jposee-core-2.0.2-SNAPSHOT.jar</literal> and</simpara>
</listitem>
<listitem>
<simpara><literal>jposee-server-simulator-2.0.2-SNAPSHOT.jar</literal></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_pulling_configuration_from_modules">
<title>Pulling configuration from modules</title>
<simpara>Now a little hack: jPOS-EE modules contain sample configuration files
inside their distributed jars. Those are intended as a reference and need to be
reviewed by the developer, but they provide a good starting point.</simpara>
<simpara>If you try the command:</simpara>
<screen>jar tvf build/install/myjposproject/lib/jposee-server-simulator-2.0.2-SNAPSHOT.jar</screen>
<simpara>You&#8217;ll see content like this:</simpara>
<screen> META-INF/
 META-INF/MANIFEST.MF
 META-INF/org/
 META-INF/org/jpos/
 META-INF/org/jpos/ee/
 META-INF/org/jpos/ee/installs/
 META-INF/org/jpos/ee/installs/cfg/
 META-INF/org/jpos/ee/installs/cfg/serversimulator.bsh         <co xml:id="CO1-1"/>
 META-INF/org/jpos/ee/installs/deploy/
 META-INF/org/jpos/ee/installs/deploy/05_serversimulator.xml   <co xml:id="CO1-2"/></screen>
<calloutlist>
<callout arearefs="CO1-1">
<para>Server Simulator configuration script</para>
</callout>
<callout arearefs="CO1-2">
<para>Server Simulator QBean descriptor</para>
</callout>
</calloutlist>
<simpara>If you try <literal>gradle tasks</literal> you&#8217;ll see that there&#8217;s a task called <quote>installResources</quote>
which is defined in <literal>jpos-app.gradle</literal> like this:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">task installResources(dependsOn: 'classes', type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    main = 'org.jpos.q2.install.Install'
    args = ["--outputDir=src/dist"]
}</programlisting>
<simpara>This basically pulls all the sample configuration files from jPOS-EE modules
and place them into the <literal>src/dist</literal> directory of your application, where you can
edit them, add them to your SCM, etc.</simpara>
<simpara>So if we call <literal>gradle installResources</literal> in the previous example, we would endup
with a couple of new files in <literal>src/dist</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>src/dist/cfg/serversimulator.bsh</literal></simpara>
</listitem>
<listitem>
<simpara><literal>src/dist/deploy/05_serversimulator.xml</literal></simpara>
</listitem>
</itemizedlist>
<simpara>Those files will land in the <literal>build/install/myjposproject</literal> on your next call to <literal>gradle installApp</literal>
or inside your distribution in <literal>build/distributions</literal> the next time you call <literal>gradle dist</literal>.</simpara>
<tip>
<simpara>At this point, you should be able to run <literal>q2</literal> from the install directory and
have a server listening to port 10000 (the default port). It&#8217;s an XML server
so you can <literal>telnet localhost 10000</literal> and fire an XML message like this.</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;isomsg&gt;
   &lt;field id="0" value="0800" /&gt;
   &lt;field id="3" value="000000" /&gt;
   &lt;field id="11" value="000001" /&gt;
   &lt;field id="41" value="00000001" /&gt;
   &lt;field id="70" value="901" /&gt;
  &lt;/isomsg&gt;</programlisting>
<simpara>If everything works alright, you should get a 0810 response.</simpara>
</tip>
<tip>
<simpara>You may want to visit the jPOS <link xl:href="http://jpos.org/tutorials">Tutorials</link> page for
additional tutorials.</simpara>
</tip>
</section>
</section>
</chapter>
</part>
<part xml:id="_modules">
<title>Modules</title>
<chapter xml:id="_introduction_to_modules">
<title>Introduction to modules</title>
<simpara>In our traditional Ant based build system, the developer chooses which modules
to use from the <emphasis>opt</emphasis> directory, and creates symbolic links to the <emphasis>modules</emphasis> directory. The build
system merges them into a flat structure, and does some processing such as:</simpara>
<itemizedlist>
<listitem>
<simpara>Concatenate constants files from all modules into single addressable constant files.</simpara>
</listitem>
<listitem>
<simpara>Create the hibernate configuration file from all the "mapping file" snippets from all the selected modules</simpara>
</listitem>
<listitem>
<simpara>Resolve any property placeholders from all modules using property files</simpara>
</listitem>
</itemizedlist>
<simpara>Compiled classes for all selected modules, static definitions for database connections, static constants file(s), etc. are
then used to generate a jar archive (jposee.jar).</simpara>
<simpara>With the introduction of Gradle-based jPOS-EE project structure,
we are also introducing a new module system, based on Maven type artifacts.</simpara>
<simpara>Some immediate benefits are:</simpara>
<itemizedlist>
<listitem>
<simpara>The SDK is built independently from your project.</simpara>
</listitem>
<listitem>
<simpara>Your project just uses the modules as versioned dependencies. As a result your project&#8217;s
footprint is reduced, as now only need to track your code, not all the jPOS-EE dependencies in your version control system.</simpara>
</listitem>
<listitem>
<simpara>The barrier to entry is greatly reduced, since a new developer could setup a
jPOS-EE project in five minutes.</simpara>
</listitem>
<listitem>
<simpara>No need to track module dependencies.</simpara>
</listitem>
<listitem>
<simpara>Each module contains "sample" configurations used during project setup at runtime.</simpara>
</listitem>
</itemizedlist>
<section xml:id="_how_do_modules_work">
<title>How do modules work?</title>
<simpara>A module is nothing more than a simple jar artifact with special features.</simpara>
<section xml:id="_hibernate_mappings">
<title>Hibernate Mappings</title>
<simpara>A Module defines a "module descriptor", stored in <emphasis role="strong">/META-INF/org/jpos/ee/modules</emphasis>. This descriptor
contains the hibernate mapping entries for the persistent entities defined in this module.</simpara>
<simpara>Here is an example,</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;module name="status"&gt;

    &lt;mappings&gt;
        &lt;mapping resource="org/jpos/ee/status/Status.hbm.xml" /&gt;
        &lt;mapping resource="org/jpos/ee/status/StatusTag.hbm.xml" /&gt;
    &lt;/mappings&gt;

&lt;/module&gt;</programlisting>
<simpara>It is best practice to name the module descriptor the same as the module name suffixed with the ".xml" extension.</simpara>
<simpara>Instead of defining them statically in a central <emphasis>hibernate.cfg.xml</emphasis>, the persistent class mappings are
resolved at runtime from all the module descriptors visible in the classpath.</simpara>
</section>
<section xml:id="_installables">
<title>Installables</title>
<simpara>There&#8217;s a very special resource path, <emphasis role="strong">/META-INF/org/jpos/ee/installs</emphasis>. Any resource stored below that path,
gets installed to the filesystem during the setup process (as shown in the tutorial).</simpara>
<simpara>So for example, if we have the <emphasis>jposee-core</emphasis> module as one of our dependencies, and the core modules has the following structure</simpara>
<screen>META-INF
`-- org
    `-- jpos
        `-- ee
            `-- installs
                |-- cfg
                |   `-- README.txt
                |-- deploy
                |   |-- 00_logger.xml
                |   `-- 99_sysmon.xml
                `-- log
                    `-- q2.log</screen>
<simpara>and we do:</simpara>
<literallayout class="monospaced">$ java -jar q2.jar -cli
q2&gt; setup .</literallayout>
<simpara>We&#8217;d get the following structure copied to our current working directory:</simpara>
<screen>.
|-- cfg
|   `-- README.txt
|-- deploy
|   |-- 00_logger.xml
|   `-- 99_sysmon.xml
`-- log
    `-- q2.log</screen>
<simpara>If now we added the <emphasis>jposee-db-mysql</emphasis> module as one of our dependencies,
which contains the following structure and ran setup again:</simpara>
<screen>META-INF
`-- org
    `-- jpos
        `-- ee
            `-- installs
                `-- cfg
                    `-- db.properties</screen>
<simpara>We&#8217;d end up with the following files in our filesystem:</simpara>
<screen>.
|-- cfg
|   |-- README.txt
|   `-- db.properties
|-- deploy
|   |-- 00_logger.xml
|   `-- 99_sysmon.xml
`-- log
    `-- q2.log</screen>
</section>
</section>
</chapter>
<chapter xml:id="_core_modules">
<title>Core Modules</title>
<section xml:id="_core">
<title>CORE</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The core module contains all basic jPOS-EE functionality.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/core available in git repository at github.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This is a core module required in all jPOS-EE applications.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Maven Coordinates</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;dependency&gt;
            &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
            &lt;artifactId&gt;jposee-core&lt;/artifactId&gt;
            &lt;version&gt;${jposee.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<simpara>The core module serves two purposes:</simpara>
<itemizedlist>
<listitem>
<simpara>It includes all basic dependencies needed to run any jPOS-EE application.</simpara>
</listitem>
<listitem>
<simpara>It contains base functionality shared by all jPOS-EE applications.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_transaction_support">
<title>Transaction Support</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The <emphasis>txn</emphasis> module contains <emphasis role="strong">Transaction Manager</emphasis>
                   support code as well as common transaction manager participants.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/txn available in git repository at github.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This module is useful if your jPOS-EE application uses the <emphasis role="strong">Transaction Manager</emphasis>.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Maven Coordinates</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;dependency&gt;
            &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
            &lt;artifactId&gt;jposee-txn&lt;/artifactId&gt;
            &lt;version&gt;${jposee.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<simpara>There is nothing worse than re-inventing the wheel for every project. With this in mind,
the jPOS team identified a series of activities that were common to almost every
enterprise grade jPOS-EE based project, and created a module to provide the basis for building
great TransactionManager participants that follow best practice patterns.</simpara>
<simpara>Instead of showing a boring table with a description of what every component does,
I think an example Transaction Manager instance is in order:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;txnmgr name="txnmgr" logger="Q2" class="org.jpos.transaction.TransactionManager"&gt;
    &lt;property name="space" value="transient:default"/&gt;
    &lt;property name="queue" value="TXN"/&gt;
    &lt;property name="max-sessions" value="10"/&gt;

    &lt;participant class="org.jpos.transaction.Open" logger="Q2" realm="open-db"&gt;     <co xml:id="CO2-1"/>
        &lt;property name="checkpoint" value="db-open"/&gt;
    &lt;/participant&gt;

    &lt;participant class="com.mydemo.DemoParticipant"                                 <co xml:id="CO2-2"/>
                 logger="Q2" realm="demo-participant"/&gt;

    &lt;participant class="org.jpos.transaction.Close" logger="Q2" realm="close-db"&gt;   <co xml:id="CO2-3"/>
        &lt;property name="checkpoint" value="close"/&gt;
    &lt;/participant&gt;
&lt;/txnmgr&gt;</programlisting>
<calloutlist>
<callout arearefs="CO2-1">
<para>The <emphasis>Open</emphasis> Participant opens a new DB session and transaction.</para>
</callout>
<callout arearefs="CO2-2">
<para>Our demo participant does some processing</para>
</callout>
<callout arearefs="CO2-3">
<para>The <emphasis>Close</emphasis> Participant commits or rollbacks the existing transaction based on overall outcome, and closes the session.</para>
</callout>
</calloutlist>
<simpara>In our demo scenario, the transaction manager will open a database session,
execute our DemoParticipant and close the database session (although our DemoParticipant does not need a DB session!).</simpara>
<simpara>In case we wanted to add some debugging, we could definitely add to the end of the file:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;participant class="org.jpos.transaction.ProtectDebugInfo"
                 logger="Q2" realm="protect-debug"&gt;                                 <co xml:id="CO3-1"/>
        &lt;property name="checkpoint" value="protect-debug-info"/&gt;
        &lt;!-- Wipes entries from context --&gt;
        &lt;property name="wipe-entry" value="PAN"/&gt;
        &lt;property name="wipe-entry" value="EXP"/&gt;
        &lt;!-- Protects contents from any ISOMsg in context --&gt;
        &lt;property name="protect-ISOMsg" value="2"/&gt;
        &lt;property name="protect-ISOMsg" value="35"/&gt;
        &lt;property name="protect-ISOMsg" value="45"/&gt;
        &lt;!-- Wipes contents from any ISOMsg in context --&gt;
        &lt;property name="wipe-ISOMsg" value="48"/&gt;
        &lt;property name="wipe-ISOMsg" value="52"/&gt;
    &lt;/participant&gt;

    &lt;participant class="org.jpos.transaction.Debug" logger="Q2" realm="debug"&gt;      <co xml:id="CO3-2"/>
        &lt;property name="checkpoint" value="debug"/&gt;
    &lt;/participant&gt;</programlisting>
<calloutlist>
<callout arearefs="CO3-1">
<para>The <emphasis>ProtectDebugInfo</emphasis> Participant protects sensitive material from logs.</para>
</callout>
<callout arearefs="CO3-2">
<para>The <emphasis>Debug</emphasis> participant dumps the contents of the context to the log.</para>
</callout>
</calloutlist>
<note>
<simpara>As of jPOS 2.1.1 and beyond, the TransactionManager automatically logs the Context, as
well as profiling information, whenever the <literal>debug</literal> property is set to <literal>true</literal>.
The <literal>Debug</literal> participant is hence not required (and actually useless/annoying as it
would log the Context twice).</simpara>
</note>
<simpara>This would result in the contents of the context being dumped to the log, protecting
sensitive material on the way.</simpara>
<simpara>In case you are wondering what the <literal>DemoParticipant</literal> might look like:</simpara>
<programlisting language="java" linenumbering="unnumbered">public class DemoParticipant extends TxnSupport implements MyConstants           <co xml:id="CO4-1"/>
{
    protected int doPrepare(long id, Context ctx) throws Exception               <co xml:id="CO4-2"/>
    {
        ISOMsg message = (ISOMsg) ctx.get(REQUEST);
        ISOSource source = (ISOSource) ctx.get(SOURCE);

        assertNotNull(message,"A valid 'REQUEST' is expected in the context");   <co xml:id="CO4-3"/>
        assertNotNull(source,"A valid 'SOURCE' is expected in the context");
        assertTrue(message.hasField(4),                                          <co xml:id="CO4-4"/>
            "The message needs to have an amount (ISOMsg:4)");

        message.setResponseMTI();

        Random random = new Random(System.currentTimeMillis());
        message.set (37, Integer.toString(Math.abs(random.nextInt()) % 1000000));
        message.set (38, Integer.toString(Math.abs(random.nextInt()) % 1000000));

        if ("000000009999".equals (message.getString (4)))
            message.set (39, "01");
        else
            message.set (39, "00");

        source.send (message);
        return PREPARED | NO_JOIN | READONLY;
    }
    public void commit(long id, Serializable context) { }
    public void abort(long id, Serializable context)  { }
}</programlisting>
<calloutlist>
<callout arearefs="CO4-1">
<para>Our demo participant extends TxnSupport, the supporting class provided by this module.</para>
</callout>
<callout arearefs="CO4-2">
<para>TxnSupport overrides the "prepare" method and delegates to <emphasis>doPrepare</emphasis></para>
</callout>
<callout arearefs="CO4-3">
<para>As you can see, not-null assertions are quite easy!</para>
</callout>
<callout arearefs="CO4-4">
<para>So are boolean assertions.</para>
</callout>
</calloutlist>
<note>
<simpara>If you are serious about jPOS-EE development involving Transaction Manager, we advise
you to study the <literal>TxnSupport</literal> class further.</simpara>
</note>
</section>
<section xml:id="_txnid">
<title>TxnId</title>
<simpara>The <literal>txn</literal> module has a handy <literal>TxnId</literal> class that can be used to generate ids in a distributed way.</simpara>
<simpara>The id is composed of:</simpara>
<itemizedlist>
<listitem>
<simpara>1-digit century</simpara>
</listitem>
<listitem>
<simpara>2-digits year</simpara>
</listitem>
<listitem>
<simpara>3-digits day of year</simpara>
</listitem>
<listitem>
<simpara>5-digits second of day</simpara>
</listitem>
<listitem>
<simpara>3-digits node id</simpara>
</listitem>
<listitem>
<simpara>5-digits transaction id</simpara>
</listitem>
</itemizedlist>
<simpara>A typical ID long value would look like this: <literal>173000348000000001</literal>,
and the <literal>toString()</literal> method would show as <literal>017-300-03480-000-00001</literal>.</simpara>
<simpara><literal>TxnId</literal> also has a handy <literal>toRrn()</literal> method that can be used to create
(and parse) 12-characters strings suitable to be used as retrieval
reference numbers.</simpara>
<simpara><literal>TxnId</literal> can be used instead of UUIDs. It puts less pressure in the database
index and provides chronological order.</simpara>
<warning>
<simpara>The last two groups, <literal>node-id</literal> and <literal>transaction-id</literal> are supposed to be unique.
transaction-id is easy to get from the transaction manager. <literal>node-id</literal> is a
tricky one, use has to ensure each node has a unique <literal>node-id</literal> to avoid
collisions.</simpara>
</warning>
</section>
<section xml:id="QI">
<title>QI Basics</title>
<section xml:id="_main_xml">
<title>Main XML</title>
<simpara>The main configuration is done on <literal>00_qi.xml</literal></simpara>
<simpara>The main contents of this file are:</simpara>
<section xml:id="_title">
<title>Title</title>
<simpara>Example:
<literal>&lt;title&gt;jPOS QI&lt;/title&gt;</literal></simpara>
<simpara>Indicates the title for the app.</simpara>
</section>
<section xml:id="_locale">
<title>Locale</title>
<simpara>Indicates the available locales for the app, it can have more than one.
The first one will be the default locale.</simpara>
<simpara>Examples:</simpara>
<simpara><literal>&lt;locale&gt;en-US&lt;/locale&gt;</literal></simpara>
<simpara><literal>&lt;locale&gt;es-UY&lt;/locale&gt;</literal></simpara>
</section>
<section xml:id="_messages">
<title>Messages</title>
<simpara>Indicates the names of the <literal>.properties</literal> files available. It can contain more than one.</simpara>
<simpara>Example:</simpara>
<literallayout class="monospaced">&lt;messages&gt;qi-core-messages&lt;/messages&gt;</literallayout>
<literallayout class="monospaced">&lt;messages&gt;qi-eeuser-messages&lt;/messages&gt;</literallayout>
<literallayout class="monospaced">&lt;messages&gt;qi-sysconfig-messages&lt;/messages&gt;</literallayout>
<simpara>The naming convention for these files is: <literal>packagename_locale.properties</literal></simpara>
</section>
<section xml:id="_menubar">
<title>Menubar</title>
<simpara>A menubar represents the horizontal menu at the top of the app.
It is represented with the <literal>&lt;menubar&gt;</literal> element.
It contains "menus".</simpara>
<section xml:id="_menu">
<title>Menu</title>
<simpara>It represents the menu item.
It has a <literal>name</literal>, an <literal>icon</literal>, a <literal>style</literal>, and an <literal>action</literal>.</simpara>
<simpara>Example:</simpara>
<simpara><literal>&lt;menu name="System" icon="COG" style="icon-cog" action="system" /&gt;</literal></simpara>
</section>
</section>
<section xml:id="_sidebar">
<title>Sidebar</title>
<simpara>Represents the sidebar, it can contain <link linkend="Section">sections</link> and <link linkend="Option">options</link>.
It is represented with the <literal>sidebar</literal> element.
It can also be identified by an <literal>id</literal>. Example: <literal>&lt;sidebar id="info"&gt; ... &lt;/sidebar&gt;</literal></simpara>
<section xml:id="_section">
<title>Section</title>
<simpara>Represents a section of the sidebar, represented with the <literal>&lt;section&gt;</literal> element. It has the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>name</literal>: String, required.</simpara>
</listitem>
</itemizedlist>
<simpara>Example: <literal>&lt;section name="System"/&gt;</literal></simpara>
</section>
<section xml:id="_option">
<title>Option</title>
<simpara>Represents an option on the sidebar, represented with the <literal>&lt;option&gt;</literal> element. It has the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>name</literal> (string, required).  The name that will be shown on the sidebar.</simpara>
</listitem>
<listitem>
<simpara><literal>action</literal> (string, required). What will be executed on click.</simpara>
</listitem>
<listitem>
<simpara><literal>perm</literal> (string, optional). The permission required to execute the action.</simpara>
</listitem>
</itemizedlist>
<simpara>Example:</simpara>
<simpara><literal>&lt;option name="Exception log" action="exceptions"/&gt;</literal></simpara>
</section>
</section>
<section xml:id="_view">
<title>View</title>
<simpara>Represents a view, it has the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>route</literal> (string, required). The <literal>route</literal> of the view to show.</simpara>
</listitem>
<listitem>
<simpara><literal>class</literal></simpara>
</listitem>
<listitem>
<simpara><literal>perm</literal> (<emphasis>*</emphasis> means any perm).</simpara>
</listitem>
<listitem>
<simpara><literal>sidebar</literal> optional sidebar id. Indicates to which sidebar the view corresponds.</simpara>
</listitem>
</itemizedlist>
<simpara>Example:</simpara>
<simpara><literal>&lt;view route="home" class="org.jpos.qi.views.DefaultView" perm="*" sidebar = "system"/&gt;</literal></simpara>
<simpara>Views can <emphasis role="strong">can/will</emphasis> contain different <link linkend="Properties">properties</link> &amp; <link linkend="Attribute">attributes</link>.</simpara>
<section xml:id="_properties">
<title>Properties</title>
<simpara>Represented with the <literal>&lt;property&gt;</literal> element. It has a <literal>name</literal> and a <literal>value</literal>.
Some views require:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>entityName</literal> (string, required for entities). The name of the entity. For example, for <literal>users</literal>, it is <literal>user</literal>.  It must be included like this: <literal>&lt;property name="entityName" value="aName"/&gt;</literal></simpara>
</listitem>
<listitem>
<simpara><literal>name</literal> (string, required when extending a class). The name for the view. When extending a class (Ex: when extending from SysConfig), it is a required field. 	It must be included like this: <literal>&lt;property name="name" value="aName"/&gt;</literal></simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_attribute">
<title>Attribute</title>
<simpara>Represented with the <literal>&lt;attribute&gt;</literal> element.
It has:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>name</literal> (string, required) The name of the attribute, it will be shown on the column, or field.</simpara>
</listitem>
<listitem>
<simpara><literal>field</literal> (boolean, optional) Boolean value indicating whether the attribute should be shown as a field, on the specific view.</simpara>
</listitem>
<listitem>
<simpara><literal>column</literal> (boolean, optional) Boolean value indicating whether the attribute should be shown as a columnn on the general view.</simpara>
</listitem>
<listitem>
<simpara><literal>read-only</literal> (boolean, optional) Boolean value indicating if the attribute should be editable</simpara>
</listitem>
<listitem>
<simpara><literal>required</literal> (boolean, optional) Indicates if the field is required. Default is false.</simpara>
</listitem>
<listitem>
<simpara><literal>regex</literal> (string, optional) A string indicating the regex used for validating the field.</simpara>
</listitem>
<listitem>
<simpara><literal>length</literal> (numeric,optional) A number, indicating the max length for the field value.</simpara>
</listitem>
<listitem>
<simpara><literal>expand-ratio</literal> (numeric,optional) A number, indicating if the field&#8217;s expandRatio to be used. (Check link:https://vaadin.com/docs/-/part/framework/layout/layout-settings.html#layout.settings.size.expanding(Vaadin docs)[Vaadin Docs] for more info).</simpara>
</listitem>
<listitem>
<simpara><literal>perm</literal> (string, optional) The permission needed to access the field.</simpara>
</listitem>
<listitem>
<simpara><literal>link</literal> (string, optional) The URL for which the link will be generated.</simpara>
</listitem>
<listitem>
<simpara><literal>position</literal> (string, optional) left/center/right/bottom: Indicates if field is displayed on the left, center, right or bottom of form layout.</simpara>
</listitem>
</itemizedlist>
<simpara>Example:</simpara>
</section>
<section xml:id="_different_classes_of_views_tabview">
<title>Different classes of views  - TabView</title>
<simpara>If the view has a class of type <literal>TabView</literal>. It can contain views within the <literal>&lt;view&gt;</literal> elements. This views accept an additional property:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>caption</literal> Indicates the caption for the tab.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</section>
<section xml:id="_qi_permissions">
<title>QI Permissions</title>
<itemizedlist>
<listitem>
<simpara><emphasis>sysadmin</emphasis> : Needed to access <literal>/roles</literal>, <literal>/permissions</literal> and roles field in <literal>/users</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis>login</emphasis> : Needed to login to <emphasis role="strong">QI</emphasis> and access <literal>/about</literal>, <literal>/memory</literal>, <literal>/log</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis>sysconfig</emphasis> : Needed to access <literal>/sysconfig</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis>users.write</emphasis>: Needed to access <literal>/users</literal>.</simpara>
</listitem>
<listitem>
<simpara><emphasis>accounting</emphasis>: Needed to access <literal>/accounts</literal> and <literal>/transactions</literal>.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</chapter>
<chapter xml:id="_database_support">
<title>Database Support</title>
<simpara>Several jPOS-EE components rely on the <literal>dbsupport</literal> module to configure and access
the underlying database (or databases) using Hibernate.</simpara>
<simpara>One of the most used class is <literal>org.jpos.ee.DB</literal> and its usage is straightforward:</simpara>
<programlisting language="java" linenumbering="unnumbered">    DB db = new DB();
    db.open();
    ...
    ...
    db.close();</programlisting>
<simpara>If you want to update the database, your code may look like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    DB db = new DB();
    db.open();
    db.beginTransaction();
    ...
    ...
    db.commit();
    db.close();</programlisting>
<simpara>The DB object implements the <literal>Closeable</literal> interface, so you can use the try-with-resources construct like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    try (DB db = new DB()) {
        db.open();
        db.beginTransaction();
        ...
        ...
        db.commit();
    }                                <co xml:id="CO5-1"/></programlisting>
<calloutlist>
<callout arearefs="CO5-1">
<para>No need to call <literal>db.close()</literal> as <literal>DB implements Closeable</literal>.</para>
</callout>
</calloutlist>
<simpara>Also, the <literal>DB</literal> object provides a couple of functional alternatives to the code above:</simpara>
<programlisting language="java" linenumbering="unnumbered">DB.exec ((db) -&gt; {
    return db.session().get(YourObject.class, yourId);
});</programlisting>
<simpara>or <literal>execWithTransaction</literal> that encloses your function within a <literal>beginTransaction/commit</literal> block.</simpara>
<programlisting language="java" linenumbering="unnumbered">DB.execWithTransaction((db) -&gt; {
    db.session().save(obj);
    return obj;
});</programlisting>
<note>
<simpara>Very often we find ourselves answering the question WHY (on earth) we have this
<literal>DB</literal> object instead of just using Hibernate session factory and sessions
directly. The answer comes from the history of jPOS-EE, which initially used an
object-oriented database (ObjectStore). ObjectStore had a <literal>DB</literal> object that one
had to instantiate to access the database, and we were used to it. Interesting
enough, ObjectStore helped model JDO, which in turn influenced the JPA we have
today.</simpara>
<simpara>Once we moved away from the object-oriented database to Hibernate, we found it
useful to keep that DB object around used by our code, slightly isolating us
from Hibernate and providing some helper functionality, and that&#8217;s the only
reason there&#8217;s a DB object in jPOS-EE.</simpara>
</note>
<section xml:id="_db_support_configuration">
<title>DB Support configuration</title>
<simpara>Hibernate applications are usually configured by means of a single <literal>hibernate.cfg.xml</literal> file
that looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD 3.0//EN"
        "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd"&gt;

&lt;hibernate-configuration&gt;
    &lt;session-factory&gt;
        ...
        ...
        &lt;mapping class="org.jpos.ee.SysConfig"/&gt;
        &lt;mapping resource="org/jpos/ee/User.hbm.xml" /&gt;
        &lt;mapping resource="org/jpos/ee/Consumer.hbm.xml" /&gt;
        &lt;mapping resource="org/jpos/ee/Revision.hbm.xml" /&gt;
        &lt;mapping resource="org/jpos/ee/Role.hbm.xml" /&gt;
        &lt;mapping class="com.your.company.entity.YourEntity" /&gt;
        ...
        ...
    &lt;/session-factory&gt;
&lt;/hibernate-configuration&gt;</programlisting>
<simpara>Besides standard configuration (c3p0, jdbc, transaction isolation), the <literal>hibernate.cfg.xml</literal> file has
a collection of mappings for your application&#8217;s entities, but jPOS-EE applications are built <emphasis>à la carte</emphasis>
picking modules from the jPOS-EE modules offering, as well as customer specific modules.</simpara>
<simpara>So if an application wants to use jPOS-EE DB support using say Postgresql backend, and wants to use the
<literal>sysconfig</literal> module, and <literal>eeuser</literal> module, you would add the following dependencies:</simpara>
<programlisting language="groovy" linenumbering="unnumbered">   compile "org.jpos.ee:jposee-db-postgresql:${jposeeVersion}" <co xml:id="CO6-1"/>
   compile "org.jpos.ee:jposee-sysconfig:${jposeeVersion}"
   compile "org.jpos.ee:jposee-eeuser:${jposeeVersion}"</programlisting>
<calloutlist>
<callout arearefs="CO6-1">
<para>the <literal>db-postgresql</literal> depends on <literal>dbsupport</literal> so no need to include it explicitly</para>
</callout>
</calloutlist>
<simpara>But upon adding these modules as a dependency, the developer would have to manually add
these mappings to the <literal>hibernate.cfg.xml</literal>.</simpara>
<simpara>In addition, as part of the edit work, you need to specify the Hibernate dialect to be used
(i.e. <literal>org.hibernate.dialect.MySQL5InnoDBDialect</literal> for MySQL, or <literal>PostgreSQLDialect</literal> for Posgresql),
JDBC URL, etc.</simpara>
<simpara>jPOS-EE uses a simple convention to dynamically create the Hibernate configuration file based on the
following rules:</simpara>
<itemizedlist>
<listitem>
<simpara>It uses an initial
<link xl:href="https://github.com/jpos/jPOS-EE/blob/master/modules/dbsupport/src/main/resources/hibernate.cfg.xml">hibernate.cfg.xml</link>
template available in the application&#8217;s CLASSPATH as starting point.</simpara>
</listitem>
<listitem>
<simpara>It scans the classpath looking for XML configuration files in each dependency jar inside the
<literal>META-INF/org/jpos/ee/modules</literal>, for example, the <literal>eeuser</literal> module has the file:</simpara>
</listitem>
</itemizedlist>
<programlisting language="xml" linenumbering="unnumbered">&lt;module name="eeuser"&gt;
    &lt;mappings&gt;
        &lt;mapping resource="org/jpos/ee/User.hbm.xml" /&gt;
        &lt;mapping resource="org/jpos/ee/Consumer.hbm.xml" /&gt;
        &lt;mapping resource="org/jpos/ee/Revision.hbm.xml" /&gt;
        &lt;mapping resource="org/jpos/ee/Role.hbm.xml" /&gt;
    &lt;/mappings&gt;
&lt;/module&gt;</programlisting>
<simpara>So those mappings become part of the main Hibernate configuration.
See <link xl:href="https://github.com/jpos/jPOS-EE/blob/master/modules/eeuser/src/main/resources/META-INF/org/jpos/ee/modules/eeuser.xml">eeuser.xml</link></simpara>
<itemizedlist>
<listitem>
<simpara>Finally, it searchs for a <literal>cfg/db.properties</literal> file in the current working directory for additional configuration and overrides.</simpara>
</listitem>
</itemizedlist>
<simpara>Here is a sample <literal>db.properties</literal>:</simpara>
<screen linenumbering="unnumbered">hibernate.connection.username=sa
hibernate.connection.password=password
hibernate.hbm2ddl.auto=validate
hibernate.connection.url=jdbc:postgresql://localhost:5432/jposee
hibernate.connection.driver_class=org.postgresql.Driver
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect</screen>
<tip>
<simpara>In addition to the XML module mapping file available in each module&#8217;s classpath, the <literal>db-*</literal> set of modules
(such as <literal>db-mysql</literal>, <literal>db-postgresql</literal>, etc.) has a sample <literal>db.properties</literal> file included in its
<literal>META-INF/q2/installs/cfg</literal> directory, so a call to <literal>gradle installResources</literal> or the <literal>install</literal> CLI command
(that you can invoke by calling <literal>q2 --cli</literal>) will export it to the operating system, where you can easily
edit it.</simpara>
</tip>
<simpara>So to recap, the following diagram shows how a dynamic <literal>hibernate.cfg.xml</literal> configuration is created when
we call <literal>DB db = new DB()</literal> with no arguments:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/DB_configuration.png"/>
</imageobject>
<textobject><phrase>DB Configuration</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>remember, the <literal>mapping</literal> files are taken from the special <literal>META-INF/org/jpos/ee/modules/*.xml</literal>.</simpara>
<tip>
<simpara>This configuration is suitable for situations where you have to connect to a single JDBC endpoint
and access and map a unique set of entities. If that&#8217;s not your case, read below for additional
options.</simpara>
</tip>
<section xml:id="_accessing_a_secondaryslave_database">
<title>Accessing a secondary/slave database</title>
<simpara>If you want to access an alternate database, you can use a modifier when instantiating your DB object,
for example:</simpara>
<programlisting language="java" linenumbering="unnumbered">   DB db = new DB ("slave");               <co xml:id="CO7-1"/>
   db.open();
   db.session().setDefaultReadOnly(true);  <co xml:id="CO7-2"/>

   ...
   ...</programlisting>
<calloutlist>
<callout arearefs="CO7-1">
<para>We call this constructor parameter a <emphasis>config modifier</emphasis></para>
</callout>
<callout arearefs="CO7-2">
<para>If this is a real <literal>slave</literal>, you may want to set the underlying Hibernate session to read-only mode.</para>
</callout>
</calloutlist>
<simpara>In this case, jPOS-EE will operate in a very similar way as the one described in the previous section,
but instead of reading properties from the <literal>cfg/db.properties</literal> file, it would read them from
<literal>cfg/slave:db.properties</literal>.</simpara>
<simpara>The previous example works for situations where the set of entities mapped to
tables in your secondary database are the same as the primary database. If that&#8217;s not the case,
in addition to read an alternate JDBC configuration from your <literal>slave:db.properties</literal> you want to map
a different set of entities.</simpara>
<simpara>If your config modifier has actually two modifiers, separated by a colon (e.g. <literal>slave:legacy</literal>),
then we&#8217;d read JDBC and optional properties from the <literal>cfg/slave:db.properties</literal>, but when we scan
for mapping files, we use the following pattern <literal>META-INF/org/jpos/ee/modules/legacy:*.xml</literal>.</simpara>
<simpara>Finally, if this black magic feels confusing, you can always call</simpara>
<programlisting language="java" linenumbering="unnumbered">   DB db = new DB("path/to/your/hibernate.cfg.xml");</programlisting>
<note>
<simpara>The <literal>DB</literal> class uses an internal cache of sessions factories, so the first time
you call it with no args or a given modifier, it will create a sessionFactory
(an expensive operation that requires access to the database), but after that
slow first time, creating new DB objects is a very cheap operation.</simpara>
</note>
<simpara>Database support is enabled by adding a database backend dependency module to
your project.</simpara>
<simpara>For MySQL:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;dependency&gt;
        &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
        &lt;artifactId&gt;jposee-db-mysql&lt;/artifactId&gt;
        &lt;version&gt;${jposee.version}&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>
<simpara>For PostgreSQL:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;dependency&gt;
        &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
        &lt;artifactId&gt;jposee-db-postgresql&lt;/artifactId&gt;
        &lt;version&gt;${jposee.version}&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>
<simpara>For H2 Embedded database:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;dependency&gt;
        &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
        &lt;artifactId&gt;jposee-db-h2&lt;/artifactId&gt;
        &lt;version&gt;${jposee.version}&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>
<simpara>For MS-SQL database:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;dependency&gt;
        &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
        &lt;artifactId&gt;jposee-db-mssql&lt;/artifactId&gt;
        &lt;version&gt;${jposee.version}&lt;/version&gt;
    &lt;/dependency&gt;</programlisting>
<warning>
<simpara>Only one of these dependencies should be defined in your project.</simpara>
</warning>
</section>
</section>
<section xml:id="_mysql_support">
<title>MySQL &#174; Support</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This module configures Hibernate to use MySQL as its back end.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">How:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Posted by the jPOS-EE team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/db-mysql available in the jPOS-EE GitHub repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>An RDBMS back end is required by Hibernate.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS-EE code related to this module is licensed under the
<link linkend="appendix_license">GNU Affero General Public License version 3</link>.
Hibernate &#174; itself is released under the GNU LGPL v2.1
license. See <link xl:href="http://hibernate.org/356.html">Hibernate&#8217;s License FAQ</link> for
details and up-to-date information. The MySQL JDBC connector is licensed
under the GNU GPL license. See
<link xl:href="http://dev.mysql.com/downloads/connector/j/5.1.html">Connector/J page</link>.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Upon running <emphasis>setup</emphasis>, your runtime directory will contain a file: cfg/db.properties.</simpara>
<programlisting language="ini" linenumbering="unnumbered">hibernate.connection.username=sa                                           <co xml:id="CO8-1"/>
hibernate.connection.password=password                                     <co xml:id="CO8-2"/>
hibernate.hbm2ddl.auto=update                                              <co xml:id="CO8-3"/>
#
hibernate.connection.url=jdbc:mysql://localhost/jposee?autoReconnect=true  <co xml:id="CO8-4"/>
hibernate.connection.driver_class=com.mysql.jdbc.Driver
hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect</programlisting>
<calloutlist>
<callout arearefs="CO8-1">
<para>Replace value with your database username</para>
</callout>
<callout arearefs="CO8-2">
<para>Replace value with your database password</para>
</callout>
<callout arearefs="CO8-3">
<para>Makes hibernate automatically update the contents of the DB to match
the entities defined. This is good to keep during development, but should
be set to <emphasis role="strong">NONE</emphasis> in a production environment.</para>
</callout>
<callout arearefs="CO8-4">
<para>Replace the host and database (jposee) to match your database settings.</para>
</callout>
</calloutlist>
<note>
<simpara>You want to change those defaults.</simpara>
</note>
</section>
<section xml:id="_postgresql_support">
<title>PostgreSQL &#174; support</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This module configures Hibernate to use PostgreSQL as its back end.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available starting in jPOS-EE v1r104.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">How:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Posted by the jPOS-EE team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/db-postgresql available in the jPOS-EE GitHib repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>An RDBMS back end is required by Hibernate.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS-EE code related to this module is licensed under the
<link linkend="appendix_license">GNU Affero General Public License version 3</link>. As
of jPOS-EE v1r98, Hibernate &#174; itself is released under the GNU LGPL v2.1
license. See <link xl:href="http://hibernate.org/356.html">Hibernate&#8217;s License FAQ</link> for
details and up-to-date information. The PostgreSQL JDBC connector is
licensed under the BSD license. See
<link xl:href="http://jdbc.postgresql.org/license.html">Postgresql.org</link>.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Upon running <emphasis>setup</emphasis>, your runtime directory will contain a file: cfg/db.properties.</simpara>
<programlisting language="ini" linenumbering="unnumbered">hibernate.connection.username=sa                                         <co xml:id="CO9-1"/>
hibernate.connection.password=password                                   <co xml:id="CO9-2"/>
hibernate.hbm2ddl.auto=update                                            <co xml:id="CO9-3"/>
hibernate.connection.url=jdbc:postgresql://localhost:5432/jposee         <co xml:id="CO9-4"/>
hibernate.connection.driver_class=org.postgresql.Driver
hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect</programlisting>
<calloutlist>
<callout arearefs="CO9-1">
<para>Replace value with your database username</para>
</callout>
<callout arearefs="CO9-2">
<para>Replace value with your database password</para>
</callout>
<callout arearefs="CO9-3">
<para>Makes hibernate automatically update the contents of the DB to match
the entities defined. This is good to keep during development, but should
be set to <emphasis role="strong">NONE</emphasis> in a production environment.</para>
</callout>
<callout arearefs="CO9-4">
<para>Replace the host and database (jposee) to match your database settings.</para>
</callout>
</calloutlist>
<note>
<simpara>You want to change those defaults.</simpara>
</note>
</section>
<section xml:id="_h2_embedded_database_support">
<title>H2 Embedded Database support</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This module configures Hibernate to use H2 as its back end.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE since v2.0.0.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">How:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Posted by the jPOS-EE team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/db-h2 available in the jPOS-EE GitHib repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>An RDBMS back end is required by Hibernate.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS-EE code related to this module is licensed under the
<link linkend="appendix_license">GNU Affero General Public License version 3</link>. As
of jPOS-EE v1r98, Hibernate &#174; itself is released under the GNU LGPL v2.1
license. See <link xl:href="http://hibernate.org/356.html">Hibernate&#8217;s License FAQ</link> for
details and up-to-date information. The H2 JDBC connector is
licensed under the EPL license. See
<link xl:href="http://www.h2database.com/html/license.html">h2database.com</link>.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Upon running <emphasis>setup</emphasis>, your runtime directory will contain a file: cfg/db.properties.</simpara>
<programlisting language="ini" linenumbering="unnumbered">hibernate.connection.username=sa                                         <co xml:id="CO10-1"/>
hibernate.connection.password=                                           <co xml:id="CO10-2"/>
hibernate.hbm2ddl.auto=update                                            <co xml:id="CO10-3"/>
hibernate.connection.url=jdbc:h2:./data/jposee;LOCK_TIMEOUT=5000         <co xml:id="CO10-4"/>
hibernate.connection.driver_class=org.h2.Driver
hibernate.dialect=org.hibernate.dialect.H2Dialect</programlisting>
<calloutlist>
<callout arearefs="CO10-1">
<para>Replace value with your database username</para>
</callout>
<callout arearefs="CO10-2">
<para>Replace value with your database password</para>
</callout>
<callout arearefs="CO10-3">
<para>Makes hibernate automatically update the contents of the DB to match
the entities defined. This is good to keep during development, but should
be set to <emphasis role="strong">NONE</emphasis> in a production environment.</para>
</callout>
<callout arearefs="CO10-4">
<para>Replace the host and database (jposee) to match your database settings.</para>
</callout>
</calloutlist>
<note>
<simpara>You want to change those defaults</simpara>
</note>
</section>
<section xml:id="_mssql_database_support">
<title>MSSQL Database support</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This module configures Hibernate to use MS-SQL as its back end.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available since v2.2.4</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">How:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Posted by the jPOS-EE team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/db-mssql available in the jPOS-EE GitHib repository.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>An RDBMS back end is required by Hibernate.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS-EE code related to this module is licensed under the
<link linkend="appendix_license">GNU Affero General Public License version 3</link>. As
of jPOS-EE v1r98, Hibernate &#174; itself is released under the GNU LGPL v2.1
license. See <link xl:href="http://hibernate.org/356.html">Hibernate&#8217;s License FAQ</link> for
details and up-to-date information. The H2 JDBC connector is
licensed under the EPL license. See
<link xl:href="http://www.h2database.com/html/license.html">h2database.com</link>.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>Upon running <emphasis>setup</emphasis>, your runtime directory will contain a file: cfg/db.properties.</simpara>
<programlisting language="ini" linenumbering="unnumbered">hibernate.connection.username=sa                                               <co xml:id="CO11-1"/>
hibernate.connection.password=password                                         <co xml:id="CO11-2"/>
hibernate.hbm2ddl.auto=update                                                  <co xml:id="CO11-3"/>
hibernate.connection.url=jdbc:sqlserver://localhost:1433;databaseName=jposee   <co xml:id="CO11-4"/>
hibernate.connection.driver_class=com.microsoft.sqlserver.jdbc.SQLServerDriver
hibernate.dialect=org.hibernate.dialect.SQLServerDialect                       <co xml:id="CO11-5"/></programlisting>
<calloutlist>
<callout arearefs="CO11-1">
<para>Replace value with your database username</para>
</callout>
<callout arearefs="CO11-2">
<para>Replace value with your database password</para>
</callout>
<callout arearefs="CO11-3">
<para>Makes hibernate automatically update the contents of the DB to match
the entities defined. This is good to keep during development, but should
be set to <emphasis role="strong">NONE</emphasis> in a production environment.</para>
</callout>
<callout arearefs="CO11-4">
<para>Replace the host and database (jposee) to match your database settings.</para>
</callout>
<callout arearefs="CO11-5">
<para><literal>SQLServer2012Dialect</literal> is also available.</para>
</callout>
</calloutlist>
<note>
<simpara>You want to change those sample defaults</simpara>
</note>
</section>
<section xml:id="_flyway_support">
<title>FlyWay Support</title>
<simpara>The <literal>db-flyway</literal> module can be used to run FlyWay migrations from the jPOS command line interface.</simpara>
<simpara>It picks the DataSource configuration from the standard DB configuration used by jPOS (that can
be defined in the <literal>db.properties</literal> file, or a target <emphasis>Environment</emphasis>.</simpara>
<simpara>When running <literal>q2 --cli</literal> (or reaching a running Q2 server using SSH), there&#8217;s a
new <literal>flyway</literal> subsystem. Inside the <literal>flyway</literal> subsystem you can find the following
commands:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>clean</literal></simpara>
</listitem>
<listitem>
<simpara><literal>info</literal></simpara>
</listitem>
<listitem>
<simpara><literal>baseline</literal></simpara>
</listitem>
<listitem>
<simpara><literal>migrate</literal></simpara>
</listitem>
<listitem>
<simpara><literal>validate</literal></simpara>
</listitem>
<listitem>
<simpara><literal>repair</literal></simpara>
</listitem>
</itemizedlist>
<simpara>All Flyway commands take into account possible environment variables, defined in <literal>cfg/default.yml</literal>, i.e.:</simpara>
<programlisting language="yaml" linenumbering="unnumbered">flyway:
    table: schema_version <co xml:id="CO12-1"/></programlisting>
<calloutlist>
<callout arearefs="CO12-1">
<para>Sets <literal>flyway.table</literal> property, in this example, we override the new default value <literal>flyway_schema_history</literal> for
backward compatibility.</para>
</callout>
</calloutlist>
<note>
<simpara>By default, the <literal>clean</literal> command is disabled, unless <literal>flyway.cleanDisabled: false</literal> is placed in the environment.</simpara>
</note>
<tip>
<simpara>The migrate command accepts an optional --out-of-order parameter.</simpara>
</tip>
<simpara>In addition to CLI support, there&#8217;s also a <literal>FlywayService</literal> that can be
configured as a QBean. We recommend to use a low filename (such as
<literal>01_flyway.xml</literal>) so that the service starts before other services that may
require the schema to be impacted in the database.</simpara>
<simpara>The QBean descriptor looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;flyway class="org.jpos.flyway.FlywayService" logger="Q2"&gt;
    &lt;property name="out-of-order" value="true" /&gt;                   <co xml:id="CO13-1"/>
    &lt;commands&gt;
        info
        migrate
    &lt;/commands&gt;
&lt;/flyway&gt;</programlisting>
<calloutlist>
<callout arearefs="CO13-1">
<para>Optional property used by Flyway migrate.</para>
</callout>
</calloutlist>
<simpara>Valid commands are:</simpara>
<itemizedlist>
<listitem>
<simpara>info</simpara>
</listitem>
<listitem>
<simpara>baseline</simpara>
</listitem>
<listitem>
<simpara>repair</simpara>
</listitem>
<listitem>
<simpara>migrate</simpara>
</listitem>
<listitem>
<simpara>validate</simpara>
</listitem>
<listitem>
<simpara>clean</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>For security, the <literal>clean</literal> command is disabled by default. The
<literal>flyway.cleanDisabled</literal> property can be set to <literal>false</literal> in order to enable it.</simpara>
</note>
<tip>
<simpara>These Flyway commands use stdout for their output. We recommend to add
&lt;property name="redirect" value="stdout, stderr" /&gt;
to your 00_logger.xml configuration in order to get unified logs.</simpara>
</tip>
</section>
</chapter>
<chapter xml:id="_binary_log">
<title>Binary Log</title>
<section xml:id="_binlog">
<title>BinLog</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>General purpose binary log</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Implemented during 2.2.4</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS Software team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/binlog</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Used by local Q2 nodes as audit trail or to SAF its transactions</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Experimental</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Maven Coordinates</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;dependency&gt;
            &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
            &lt;artifactId&gt;jposee-binlog&lt;/artifactId&gt;
            &lt;version&gt;${jposee.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<simpara>The jPOS BinLog has the following features:</simpara>
<itemizedlist>
<listitem>
<simpara>multiple readers and writers can be used from the same JVM</simpara>
</listitem>
<listitem>
<simpara>multiple readers and writers can be used from different JVMs</simpara>
</listitem>
</itemizedlist>
<tip>
<simpara>Make sure you read and understand the implementation notes at the end of this
section before you attempt to use it.</simpara>
</tip>
<simpara>Here is a sample Writer:</simpara>
<programlisting language="java" linenumbering="unnumbered">    File dir = new File("/tmp/binlog");
    try (BinLogWriter bl = new BinLogWriter(dir)) {                                  <co xml:id="CO14-1"/>
        bl.add( ... ); // byte array
        bl.add( ... ); // byte array
        bl.add( ... ); // byte array
    }</programlisting>
<calloutlist>
<callout arearefs="CO14-1">
<para>The BinLogWriter implements <literal>AutoCloseable</literal> so <literal>try-with-resources</literal> can be used</para>
</callout>
</calloutlist>
<simpara>A reader would look like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">    File dir = new File("/tmp/binlog");
    try (BinLogReader bl = new BinLogReader(dir)) {
        while (bl.hasNext()) {
            byte[] b = bl.next().get();
            // do something with the byte[]
        }
    }</programlisting>
<simpara>The <literal>BinLogReader</literal> implements an <literal>Iterator&lt;BinLog.Entry&gt;</literal>. Each <literal>BinLog.Entry</literal> has two
main methods:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>BinLog.Rer ref()</literal></simpara>
</listitem>
<listitem>
<simpara><literal>byte[] get()</literal></simpara>
</listitem>
</itemizedlist>
<simpara>While iterating over a BinLog, it might make sense to persistently store its <literal>BinLog.Ref</literal>
in order to be able to restart the iterator at a given point if required (this is useful
if using the BinLog to implement a Store and Forward).</simpara>
<simpara>The <literal>BinLogReader</literal> has two constructors:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>BinLogReader(File dir)</literal></simpara>
</listitem>
<listitem>
<simpara><literal>BinLogReader(File dir, BinLog.Ref ref)</literal></simpara>
</listitem>
</itemizedlist>
<simpara>the latter can be used to restart the iterator at a given reference point obtained from a previous run.</simpara>
<simpara>In addition to the standard <literal>hasNext()</literal> method required by the <literal>Iterator</literal> implementation,
<literal>BinLogReader</literal> also has a <literal>hasNext(long millis)</literal> method that waits a given number of
milliseconds once it reaches the end of the log, attempting to wait for a new entry
to be available.</simpara>
<section xml:id="_implementation_notes">
<title>Implementation notes</title>
<simpara>The goal behind the BinLog implementation is to have a future proof file format easy to
read from any language, 10 years down the road. We found that the Mastercard simple IPM
file format, that&#8217;s basically a two-byte message length followed by the message itself
was suitable for that. The payload on each record can be ISO-8583 (like Mastercard), JSON,
FSDMsg based, Protocol buffers or whatever format the user choose.</simpara>
<simpara>But that format isn&#8217;t crash proof. If a system crashes while a record is being written to
disk, the file can get easily corrupted. So we picked some ideas from Square&#8217;s <emphasis>tape</emphasis>
project that implements a highly crash proof on-disk persistent circular queue using
a very small header. Tape is great and we encourage you to consider it instead of this binlog
for some use cases, but we didn&#8217;t want a circular queue, we wanted a place to securely store
events for audit or store and forward purposes, and we also wanted to be able to access the
same binlog from multiple JVMs with access to the same file-system, so we had to write our own.</simpara>
<simpara>The on-disk file format looks like this:</simpara>
<screen linenumbering="unnumbered">Format:
  256 bytes Header
  ... Data
  ... Data

Header format (256 bytes):
  4 bytes header length
  2 bytes version
  2 bytes Status (00=open, 01=closed)
  8 bytes Last element position
  4 bytes this log number
  4 bytes next log number
232 bytes reserved

Element:
  4 bytes Data length
  ...     Data</screen>
<simpara>Each record has a length prefix (four bytes in network byte order) followed by
its data. The header has a fixed length of 256 bytes but we found useful to
make it look like a regular record too by providing its length at the very
beginning. An implementation in any language reading a jPOS binlog can just
be programmed to skip the first record.</simpara>
<simpara>At any given time (usually at end of day), a process can request a <emphasis role="strong">cut-over</emphasis>
by calling the <literal>BinLogWriter.cutover()</literal> method in that case, all writers and
readers will close the current file and move to the next one (Readers can
choose to not-follow to the next file, for example while producing daily
extracts).</simpara>
<simpara>In order to achieve file crash resilience, each write does the following:</simpara>
<itemizedlist>
<listitem>
<simpara>Lock the file</simpara>
</listitem>
<listitem>
<simpara>Write the record&#8217;s length and data</simpara>
</listitem>
<listitem>
<simpara>Sync to disc</simpara>
</listitem>
<listitem>
<simpara>Write the last element position to the header</simpara>
</listitem>
<listitem>
<simpara>Sync to disc</simpara>
</listitem>
<listitem>
<simpara>Unlock the file</simpara>
</listitem>
</itemizedlist>
<note>
<simpara>In an MBP with SDRAM we&#8217;ve managed to achieve approximately 6000 writes per
second. On an iMac with regular disk the numbers go down to approximately 1500
writes per second for regular ISO-8583 message lengths (500..1000 bytes per
record).</simpara>
</note>
<simpara>Due to the fact that the header is small enough to fit in an operating
system block, the second write where we place the last element position happens
to be atomic. While this works OK for readers and writers reading the file from
different JVMs, that&#8217;s not the case for readers and writers running on the same
JVM, even if they use a different file descriptor to open the file, the operating
system stack has early access to the header that under high concurrency can lead
to garbage values, that&#8217;s the reason the code synchronizes on a <literal>mutex</literal> object
at specific places.</simpara>
</section>
<section xml:id="_supporting_cli_commands">
<title>Supporting CLI commands</title>
<simpara>The <literal>binlog</literal> CLI command is a subsystem that currently has three commands:</simpara>
<itemizedlist>
<listitem>
<simpara>monitor (to visually monitor a binlog)</simpara>
</listitem>
<listitem>
<simpara>cutover (to force a cutover)</simpara>
</listitem>
<listitem>
<simpara>exit (builtin command)</simpara>
</listitem>
</itemizedlist>
<simpara><literal>binlog</literal> accepts a parameter with the binlog&#8217;s path, i.e: <literal>binlog /tmp/binlog</literal></simpara>
<simpara>So a cutover can be triggered from cron using the following command:</simpara>
<screen linenumbering="unnumbered">q2 --command="binlog /tmp/binlog; cutover; exit; shutdown --force"</screen>
</section>
<section xml:id="_binlog_quartz_support">
<title>BinLog Quartz Support</title>
<simpara>The <literal>binlog-quartz</literal> provides support for automatic cutover, for example:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;cron class="org.jpos.q2.QuartzAdaptor" logger="Q2"&gt;
  &lt;job id="1" class="org.jpos.binlog.cron.CutoverJob" when="59 59 23 * * ?"
       logger="Q2" realm="binlog-cutover"&gt;
    &lt;property name="binlog" value="/tmp/binlog" /&gt;
  &lt;/job&gt;
&lt;/cron&gt;</programlisting>
</section>
</section>
</chapter>
<chapter xml:id="_rest_support">
<title>Rest Support</title>
<section xml:id="_qrest">
<title>QRest</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Lightweight REST server</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Implemented during 2.2.5</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS Software team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/qrest</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Useful in situations where a full blown Jetty/Jersey is overkill</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Used in production</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Maven Coordinates</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;dependency&gt;
            &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
            &lt;artifactId&gt;jposee-qrest&lt;/artifactId&gt;
            &lt;version&gt;${jposee.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<simpara>Traditionally, jPOS based REST applications use the Jetty module, Jersey, etc. as described
in the <link xl:href="http://jpos.org/tutorials">jPOS Tutorials</link>. But we have situations where we just
need to provide a little <literal>ok</literal> response to say a <literal>/health</literal> endpoint on each Q2 running
(for monitoring purposes).</simpara>
<simpara>Configuring Jetty/Jersey and deploying a <literal>war</literal> seems like overkill for these use cases so
we&#8217;ve created a little <emphasis role="strong">QRest</emphasis> module that can be configured like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qrest class='org.jpos.qrest.RestServer' logger='Q2'&gt;
  &lt;property name='port' value='8081' /&gt;                                            <co xml:id="CO15-1"/>
  &lt;property name='queue' value='TXNMGR' /&gt;                                         <co xml:id="CO15-2"/>
  &lt;property name="TLS" value="true" /&gt;                                             <co xml:id="CO15-3"/>
  &lt;property name="server-auth" value="false" /&gt;                                    <co xml:id="CO15-4"/>
  &lt;property name="client-auth" value="false" /&gt;                                    <co xml:id="CO15-5"/>
  &lt;property name="keystore" value="cfg/keystore.jks" /&gt;                            <co xml:id="CO15-6"/>
  &lt;property name="storepassword" value="jposjposjposjpos" /&gt;                       <co xml:id="CO15-7"/>
  &lt;property name="keypassword"   value="jposjposjposjpos" /&gt;                       <co xml:id="CO15-8"/>
  &lt;property name="enabled-cipher" value="TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA" /&gt;  <co xml:id="CO15-9"/>
  &lt;property name="enabled-cipher" value="TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256" /&gt;
  &lt;property name="enabled-cipher" value="TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384" /&gt;
  ...
  ...
&lt;/qrest&gt;</programlisting>
<calloutlist>
<callout arearefs="CO15-1">
<para>Listening port</para>
</callout>
<callout arearefs="CO15-2">
<para>Transaction manager queue name (if no specific routes are present)</para>
</callout>
<callout arearefs="CO15-3">
<para><literal>true</literal> to enable TLS</para>
</callout>
<callout arearefs="CO15-4">
<para>Set to <literal>false</literal> in order to allow self-signed certificates</para>
</callout>
<callout arearefs="CO15-5">
<para><literal>true</literal> requires client-side certificates</para>
</callout>
<callout arearefs="CO15-6">
<para>Keystore location</para>
</callout>
<callout arearefs="CO15-7">
<para>Store password</para>
</callout>
<callout arearefs="CO15-8">
<para>Key password</para>
</callout>
<callout arearefs="CO15-9">
<para>Enabled ciphers (optional, defaults to <emphasis>all</emphasis> if not present)</para>
</callout>
</calloutlist>
<simpara>Once the server receives an HTTP request, it creates a <literal>org.jpos.transaction.Context</literal>, places a reference to the http request
(under the Constant name <literal>REQUEST</literal> defined in the <literal>org.jpos.qrest.Constants</literal> enum), and to the session in the <literal>SESSION</literal>
constant (so that a <literal>SendResponse</literal> participant can reply) and send it off to the TransactionManager for processing.</simpara>
<simpara>If no specific <literal>&lt;route&gt;</literal> entries are present in the QRest configuration, incoming messages are sent to the <literal>queue</literal>
specified in the <literal>queue</literal> property, but you can override those with a route like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;qrest class='org.jpos.qrest.RestServer' logger='Q2'&gt;
  &lt;property name='port' value='8081' /&gt;
  &lt;property name='queue' value='TXNMGR' /&gt;
  ...
  ...
  &lt;route path="/v2/**" method="GET" queue="TXNMGR.2"/&gt;                             <co xml:id="CO16-1"/>
  &lt;route path="/v2/**" method="POST" queue="TXNMGR.2"/&gt;                            <co xml:id="CO16-2"/>
&lt;/qrest&gt;</programlisting>
<calloutlist>
<callout arearefs="CO16-1">
<para>All <literal>GET</literal> methods starting with <literal>/v2</literal> will get queued to <literal>TXNMGR.2</literal> instead of the
standard <literal>TXNMGR</literal> queue.</para>
</callout>
<callout arearefs="CO16-2">
<para>Likewise, <literal>POST</literal> starting with <literal>/v2</literal> will get queued to the <literal>TXNMGR.2</literal> too.</para>
</callout>
</calloutlist>
<simpara>The TransactionManager is configured like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;txnmgr class="org.jpos.transaction.TransactionManager" logger="Q2"&gt;
  &lt;property name="queue" value="TXNMGR"/&gt;
  &lt;property name="sessions" value="2"/&gt;
  &lt;property name="max-sessions" value="128"/&gt;
  &lt;property name="debug" value="true"/&gt;

  &lt;participant class="org.jpos.qrest.participant.Router"&gt;
    &lt;route path="/jpos/myroute/{mypathparam}**" method="GET" name="mygroup1"/&gt;
    &lt;route path="/jpos/myroute/{mypathparam}**" method="POST" name="mygroup2"/&gt;
    &lt;route path="/jpos/fixedroute" method="POST" name="..."/&gt;
    &lt;route path="/q2**" method="GET" name="q2"/&gt;                                 <co xml:id="CO17-1"/>
  &lt;/participant&gt;

  &lt;group name="q2"&gt;
    &lt;participant class="org.jpos.qrest.participant.Q2Info" /&gt;
  &lt;/group&gt;
  ..
  ..
  &lt;group name="group1"&gt;
    ..
    ..
  &lt;/group&gt;
  &lt;group name="group2"&gt;
    ..
    ..
  &lt;/group&gt;
  &lt;participant class="org.jpos.qrest.SendResponse" logger="Q2"/&gt;
&lt;/txnmgr&gt;</programlisting>
<calloutlist>
<callout arearefs="CO17-1">
<para>This route is special, see below, route processing gets delegated to the Q2Info class</para>
</callout>
</calloutlist>
<simpara>In situations where multiple routes are defined at the QRest server configuration,
classes like <literal>Q2Info</literal> that internally process routes may need to know about the
prefix in use. This can be configured using the <literal>prefix</literal> property, i.e.:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;group name="q2"&gt;
    &lt;participant class="org.jpos.qrest.participant.Q2Info"&gt;
       &lt;property name="prefix" value="/v2" /&gt;                                    <co xml:id="CO18-1"/>
    &lt;/participant&gt;
  &lt;/group&gt;</programlisting>
<calloutlist>
<callout arearefs="CO18-1">
<para><literal>prefix</literal> property should match the route&#8217;s prefix</para>
</callout>
</calloutlist>
<tip>
<simpara>This old <link xl:href="http://jpos.org/blog/2013/10/eating-our-own-dogfood/">Blog Post</link> explained how
the TransactionManager could be used to implement REST based APIs. The QRest service can
be used to simplify a lot of Jetty/Server/Jersey boilerplate.</simpara>
</tip>
<simpara>The <literal>Router</literal> participant is actually a <literal>GroupSelector</literal> (from the TransactionManager&#8217;s standpoint)
and takes care of parsing and placing in the Context both <emphasis>Path Parameters</emphasis> as well as
<emphasis>Query Parameters</emphasis> (under the <literal>PATHPARAMS</literal> and <literal>QUERYPARAMS</literal> constants).</simpara>
<simpara>So if we define a route like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;route path="/jpos/muxes/{muxname}" method="GET" name="muxes"/&gt;</programlisting>
<simpara>and we fire <literal>curl localhost:8081/jpos/muxes/ABC</literal>, we&#8217;ll see that the Context will have a:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> o.j.r.Constants.PATHPARAMS: {muxname=ABC}</programlisting>
<simpara>If we add query parameters to the call, i.e.: <literal>curl "localhost:8081/jpos/muxes/XYZ?a=1&amp;b=2&amp;c=3"</literal></simpara>
<simpara>the query parameters will be available under the <literal>QUERYPARAMS</literal> constant.</simpara>
<programlisting language="xml" linenumbering="unnumbered">      o.j.r.Constants.QUERYPARAMS: {a=[1], b=[2], c=[3]}
      o.j.r.Constants.PATHPARAMS: {muxname=XYZ}</programlisting>
<simpara>In addition to having the Router participant parse the route, one can define wildcard
handlers for some routes. This is the case of the <literal>Q2Info</literal> participant that&#8201;&#8212;&#8201;although work in progress&#8201;&#8212;&#8201;intends to provide useful information about a running Q2 system.</simpara>
<simpara>So anything that starts with <literal>/q2</literal> (or whatever one choose to set in the XML configuration) will be handled
by Q2Info.</simpara>
<simpara>Q2Info itself has its own routes, but those are hardcoded. So if we call <literal>/q2/version</literal>, we get output like this:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "version" : "jPOS 2.1.2-SNAPSHOT master/0a14e5c (2018-04-30 22:34:16 UTC)"
}</programlisting>
<simpara><literal>/q2/uptime</literal> would give us:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "uptime" : 601483
}</programlisting>
<simpara><literal>/q2/diskspace</literal>:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
  "diskspace" : {
    "free" : 616271151104,
    "usable" : 616009007104
  }
}</programlisting>
<simpara>Q2Info also provides now information about the MUXES, and we plan to expand it to provide
information about other components (servers, transaction manager, space).</simpara>
<simpara>i.e.: <literal>curl localhost:8081/q2/muxes</literal></simpara>
<programlisting language="json" linenumbering="unnumbered">  "muxes" : [ {
    "name" : "clientsimulator-mux",
    "type" : "QMUX",
    "connected" : true,
    "rx" : 21,
    "tx" : 21,
    "txExpired" : 0,
    "txPending" : 0,
    "rxExpired" : 0,
    "rxPending" : 0,
    "rxUnhandled" : 0,
    "rxForwarded" : 0,
    "metrics" : {
      "all" : {
        "autoResize" : false,
        "highestTrackableValue" : 60000,
        "lowestDiscernibleValue" : 1,
        "numberOfSignificantValueDigits" : 2,
        "tag" : null,
        "maxValue" : 18,
        "minNonZeroValue" : 3,
        "totalCount" : 21,
        "estimatedFootprintInBytes" : 10752,
        "startTimeStamp" : 9223372036854775807,
        "endTimeStamp" : 0,
        "maxValueAsDouble" : 18.0,
        "mean" : 6.190476190476191,
        "stdDeviation" : 3.141413809994408,
        "neededByteBufferCapacity" : 11560,
        "minValue" : 3
      },
      "ok" : {
        "autoResize" : false,
        "highestTrackableValue" : 60000,
        "lowestDiscernibleValue" : 1,
        "numberOfSignificantValueDigits" : 2,
        "tag" : null,
        "maxValue" : 18,
        "minNonZeroValue" : 3,
        "totalCount" : 21,
        "estimatedFootprintInBytes" : 10752,
        "startTimeStamp" : 9223372036854775807,
        "endTimeStamp" : 0,
        "maxValueAsDouble" : 18.0,
        "mean" : 6.190476190476191,
        "stdDeviation" : 3.141413809994408,
        "neededByteBufferCapacity" : 11560,
        "minValue" : 3
      }
    },
    "last" : "2018-05-02 17:56:48",
    "idle" : 1306237
  } ]
}</programlisting>
<simpara>If we use the mux name as part of the URI, we get information for a particular MUX, i.e.:
<literal>curl localhost:8081/q2/muxes/clientsimulator-mux</literal></simpara>
<simpara>Here is a copy of the internal Q2Info route configuration:</simpara>
<programlisting language="java" linenumbering="unnumbered">    private void initInternalRoutes() {
        routes.add(new Route&lt;&gt;("/q2/version**", "GET",
            (t,s) -&gt; mapOf ("version", q2Version())));
        routes.add(new Route&lt;&gt;("/q2/applicationVersion**", "GET",
            (t,s) -&gt; mapOf("applicationVersion", Q2.getAppVersionString())));
        routes.add(new Route&lt;&gt;("/q2/instanceId**", "GET",
            (t,s) -&gt; mapOf("instanceId", q2.getInstanceId())));
        routes.add(new Route&lt;&gt;("/q2/uptime**", "GET",
            (t,s) -&gt; mapOf("uptime", q2.getUptime())));
        routes.add(new Route&lt;&gt;("/q2/started**", "GET",
            (t,s) -&gt; mapOf("started", new Date(System.currentTimeMillis() -
            q2.getUptime()))));
        routes.add(new Route&lt;&gt;("/q2/diskspace**", "GET",
            (t,s) -&gt; diskspace()));
        routes.add(new Route&lt;&gt;("/q2/muxes/{muxname}**", "GET",
            (t,s) -&gt; muxInfo(t,s)));
        routes.add(new Route&lt;&gt;("/q2/muxes**", "GET",
            (t,s) -&gt; muxes()));
    }</programlisting>
<simpara>If we just call <literal>/q2</literal>, it will output them all.</simpara>
<section xml:id="_static_and_dynamic_html_content">
<title>Static and Dynamic HTML content</title>
<simpara>QRest is by no means a full fledged web server, but it can still serve static and
dynamic HTML pages using the <literal>StaticContent</literal> and <literal>DynamicContent</literal> participants.</simpara>
<simpara>Our qrest TXNMGR configuration can include static content like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;participant class="org.jpos.qrest.participant.Router"&gt;
    &lt;route path="/welcome.html" method="GET" name="welcome" /&gt;
 &lt;/participant&gt;

 &lt;group name="welcome"&gt;
   &lt;participant class="org.jpos.qrest.participant.StaticContent"&gt;
       &lt;property name="documentRoot" value="html" /&gt;
       &lt;property name="content" value="welcome.html" /&gt;
   &lt;/participant&gt;
 &lt;/group&gt;</programlisting>
<simpara>So a call to <literal>http://localhost:8080/welcome.html</literal> will land in group named <literal>welcome</literal> that
will serve the file <literal>html/welcome.html</literal>. If instead of hitting <literal>welcome.html</literal> the user
tries anything else, it will fail with a 404 error.</simpara>
<simpara>In order to serve <emphasis>any</emphasis> file inside the <literal>documentRoot</literal>, one can omit the property
<literal>content</literal>, i.e.:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;participant class="org.jpos.qrest.participant.Router"&gt;
    &lt;route path="/static/**" method="GET" name="static" /&gt;
 &lt;/participant&gt;

 &lt;group name="static"&gt;
   &lt;participant class="org.jpos.qrest.participant.StaticContent"&gt;
     &lt;property name="documentRoot" value="static" /&gt;
   &lt;/participant&gt;
 &lt;/group&gt;</programlisting>
<simpara>In this case, any file in the <literal>static</literal> directory will be served, if present.</simpara>
<simpara>In addition to static files, QRest can render dynamic content using Freemarker.</simpara>
<simpara>The configuration looks like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered"> &lt;participant class="org.jpos.qrest.participant.Router"&gt;
    &lt;route path="/dynamic" method="GET" name="dynamic" /&gt;
 &lt;/participant&gt;

 &lt;group name="dynamic"&gt;
   &lt;participant class="org.jpos.qrest.participant.DynamicContent"&gt;
     &lt;property name="documentRoot" value="templates" /&gt;
     &lt;property name="content" value="dynamic.html" /&gt;                 <co xml:id="CO19-1"/>
     &lt;property name="page.ctx.include" value="_include.html" /&gt;
     &lt;property name="page.ctx.myprop" value="myvalue" /&gt;
   &lt;/participant&gt;
 &lt;/group&gt;</programlisting>
<calloutlist>
<callout arearefs="CO19-1">
<para>For security, the template file has to be specified.</para>
</callout>
</calloutlist>
<simpara>The <literal>DynamicContent</literal> class uses a special qrest Constant <literal>RENDER_CONTEXT</literal> with a
map to be passed to the Freemarker template engine. Properties starting with the
prefix <literal>page.ctx.</literal> will be processed at participant initialization time and
handed to the template engine at process time. In this example, a property called
<literal>include</literal> and <literal>myprop</literal> will be available to the template engine, and can be used to write
a template like this:</simpara>
<programlisting language="html" linenumbering="unnumbered">&lt;h1&gt; Dynamic Content &lt;/h1&gt;

Processing transaction ${id}           <co xml:id="CO20-1"/>

&lt;#include include&gt;</programlisting>
<calloutlist>
<callout arearefs="CO20-1">
<para>The <emphasis>id</emphasis> property is also provided by the <literal>DynamicContent</literal> participant using the
transaction id.</para>
</callout>
</calloutlist>
</section>
</section>
<section xml:id="_httpclient">
<title>HttpClient</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>HttpQuery participant</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Implemented during 2.2.6</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS Software team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/http-client</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Lightweight asynchronous Http Participant</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Experimental</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Maven Coordinates</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;dependency&gt;
            &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
            &lt;artifactId&gt;jposee-http-client&lt;/artifactId&gt;
            &lt;version&gt;${jposee.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<simpara>The <literal>HttpQuery</literal> participant has the following configuration properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>url</literal>: a <emphasis>hardcoded</emphasis> url for the request (it will be used as is, so it must be valid as per <literal>java.net.URI</literal>).
Can be overriden in the transaction context by the value of the <literal>HTTP_URL</literal> entry (or whatever the entry key has been changed to by the <literal>urlName</literal> configuration property).</simpara>
</listitem>
<listitem>
<simpara><literal>connect-timeout</literal>: milliseconds to wait for connection (default 10000)</simpara>
</listitem>
<listitem>
<simpara><literal>timeout</literal>: milliseconds to wait for an HTTP response (based on socket activity; default 15000)</simpara>
</listitem>
<listitem>
<simpara><literal>contentType</literal>: defaults to <literal>"application/json"</literal></simpara>
</listitem>
<listitem>
<simpara><literal>httpHeader</literal>: a <emphasis>repeatable</emphasis> configuration property representing an HTTP request header, where the value is
of the form <literal>header_name:header_value</literal></simpara>
</listitem>
<listitem>
<simpara><literal>redirect-strategy</literal>: Sets the strategy to use when the remote HTTP server returns a redirect.
If the property is undefined, or has the "default" value, it will use Apache&#8217;s <literal>DefaultRedirectStrategy</literal>.
If the value is <literal>lax</literal> it will use <literal>LaxRedirectStrategy</literal> (see: <link xl:href="https://hc.apache.org/httpcomponents-client-ga/tutorial/html/fundamentals.html">https://hc.apache.org/httpcomponents-client-ga/tutorial/html/fundamentals.html</link>)</simpara>
</listitem>
<listitem>
<simpara><literal>preemptiveAuth</literal>: if doing Basic Authentication (by presence of context value), do it on the first request (default <literal>false</literal>)</simpara>
</listitem>
<listitem>
<simpara><literal>responseBodyOnError</literal>: should an HTTP response body be included for responses with error
status code? (<literal>boolean</literal>, default <literal>false</literal>);</simpara>
</listitem>
<listitem>
<simpara><literal>maxConnections</literal>: set the maximum number of concurrent client connections; if unset it will default to <emphasis role="strong">25</emphasis> concurrent connetions.+
<emphasis role="strong">NOTE:</emphasis> This value is overridable by the <literal>http.maxConnections</literal> Java system property, and it applies globally to the whole process.</simpara>
</listitem>
</itemizedlist>
<simpara>In addition, <literal>HttpQuery</literal> picks a few <emphasis>configurable</emphasis> entries from the <literal>Context</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>HTTP_URL</literal>: with the remote host&#8217;s URL</simpara>
</listitem>
<listitem>
<simpara><literal>HTTP_METHOD</literal>: currently one of <literal>GET</literal>, <literal>POST</literal>, <literal>PUT</literal></simpara>
</listitem>
<listitem>
<simpara><literal>HTTP_VERSION</literal>: allows forcing an older version. Defaults to JVM default.</simpara>
</listitem>
<listitem>
<simpara><literal>HTTP_PARAMS</literal>: the <emphasis>query string</emphasis> (must be correctly encoded), and it&#8217;s appended to the previously
computed URL, with a <literal>?</literal> separating both parts</simpara>
</listitem>
<listitem>
<simpara><literal>HTTP_REQUEST</literal>: a request payload (i.e., JSON String)</simpara>
</listitem>
<listitem>
<simpara><literal>HTTP_CONTENT_TYPE</literal>: overrides the one given with the <literal>contentType</literal> configuration property</simpara>
</listitem>
<listitem>
<simpara><literal>HTTP_HEADERS</literal>: HTTP request headers that will be dynamically added to whatever was configured by the
set of <literal>httpHeader</literal> properties.  The value of the <literal>HTTP_HEADERS</literal> entry in the <literal>Context</literal> can be of three different
types:</simpara>
<itemizedlist>
<listitem>
<simpara>a <literal>String[]</literal> where each item follows the <literal>header_name:header_value</literal> syntax</simpara>
</listitem>
<listitem>
<simpara>a <literal>List&lt;String&gt;</literal> where each item follows the <literal>header_name:header_value</literal> syntax</simpara>
</listitem>
<listitem>
<simpara>a <literal>Map&lt;String,String&gt;</literal> where the keys represent <emphasis>header names</emphasis>, and the values the corresponding <emphasis>header values</emphasis></simpara>
</listitem>
</itemizedlist>
</listitem>
<listitem>
<simpara><literal>.HTTP_BASIC_AUTHENTICATION</literal>: A String of the form <literal>&lt;username&gt;:&lt;password&gt;</literal> used for HTTP Basic Authentication.<?asciidoc-br?>
<emphasis role="strong">NOTE:</emphasis> The default <literal>Context</literal> name starts with a period (<literal>.</literal>), meaning it will be hidden in the logs during a context dump.</simpara>
</listitem>
</itemizedlist>
<simpara>After successful completion (which may include normal HTTP errors such as <literal>404</literal> or <literal>500</literal>), <literal>HttpQuery</literal> stores the result
back into the <literal>Context</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>HTTP_STATUS</literal>: integer with the HTTP status code.</simpara>
</listitem>
<listitem>
<simpara><literal>HTTP_RESPONSE</literal>: a <literal>String</literal> with the response body, if any.</simpara>
</listitem>
</itemizedlist>
<simpara>Here is a sample configuration taking all the defauts:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;participant class="org.jpos.http.client.HttpQuery" /&gt;</programlisting>
<simpara>The default names used above can be overridden, e.g.:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;participant class="org.jpos.http.client.HttpQuery"&gt;
    &lt;property name="urlName" value="MY_HTTP_URL" /&gt;
    &lt;property name="methodName" value="MY_HTTP_METHOD" /&gt;
    &lt;property name="versionName" value="MY_HTTP_VERSION" /&gt;
    &lt;property name="paramsName" value="MY_HTTP_PARAMS" /&gt;
    &lt;property name="headersName" value="MY_HTTP_HEADERS" /&gt;
    &lt;property name="requestName" value="MY_HTTP_REQUEST" /&gt;
    &lt;property name="responseName" value="MY_HTTP_RESPONSE" /&gt;
    &lt;property name="responseStatusName" value="MY_HTTP_STATUS" /&gt;

    &lt;property name="contentType" value="application/json" /&gt;                  <co xml:id="CO21-1"/>
    &lt;property name="contentTypeName" value="MY_HTTP_CONTENT_TYPE" /&gt;          <co xml:id="CO21-2"/>

    &lt;property name="basicAuthenticationName" value=".MY_BASIC_CREDENTIALS" /&gt; <co xml:id="CO21-3"/>
  &lt;/participant&gt;</programlisting>
<calloutlist>
<callout arearefs="CO21-1">
<para>Content-Type defaults to <literal>application/json</literal></para>
</callout>
<callout arearefs="CO21-2">
<para>Name of the Context variable where user can <emphasis role="strong">override</emphasis> the default content type.</para>
</callout>
<callout arearefs="CO21-3">
<para>We recommend that the context key starts with a period, so it will be a hidden entry during a context dump in the logs.</para>
</callout>
</calloutlist>
<simpara>Here is a sample use:</simpara>
<programlisting language="java" linenumbering="unnumbered">    TransactionManager mgr = ... // somehow get a reference to a TransactionManager
    Context ctx = new Context();
    ctx.put("HTTP_URL", "http://localhost/q2/version");
    ctx.put("HTTP_METHOD", "GET");
    mgr.queue(ctx); <co xml:id="CO22-1"/>
    Integer sc = ctx.get ("HTTP_STATUS", 10000L); <co xml:id="CO22-2"/>
    String response = ctx.get ("HTTP_RESPONSE");</programlisting>
<calloutlist>
<callout arearefs="CO22-1">
<para>Enqueue <literal>ctx</literal> to be processed by <literal>mgr</literal> that has an <literal>HttpQuery</literal> in its list of participants.</para>
</callout>
<callout arearefs="CO22-2">
<para>Wait up to 10 seconds for a response</para>
</callout>
</calloutlist>
</section>
</chapter>
<chapter xml:id="_tools">
<title>Tools</title>
<section xml:id="_freemarker_decorator">
<title>Freemarker Decorator</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This module contains a text processor which decorates deployable descriptors for Q2.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE since v2.0.0.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/freemarker-decorator available in git repository at github.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Install this module to better parameterize your applications.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS-EE code related to this module is licensed under the
                   <link linkend="appendix_license">GNU Affero General Public License version 3</link>.
                   FreeMarker &#174; itself is released under the BSD
                   license. See <link xl:href="http://freemarker.sourceforge.net/docs/app_license.html">http://freemarker.sourceforge.net/docs/app_license.html</link> for
                   details and up-to-date information.</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Maven Coordinates</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;dependency&gt;
            &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
            &lt;artifactId&gt;jposee-freemarker-decorator&lt;/artifactId&gt;
            &lt;version&gt;${jposee.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<section xml:id="_activation_steps">
<title>Activation steps</title>
<simpara>This module remains dormant unless it finds its configuration resource.</simpara>
<simpara>In order to activate this module, you need to create a resource in your project residing at
<emphasis>META-INF/org/jpos/config/Q2-decorator.properties</emphasis> of your classpath (not the filesystem!).</simpara>
<simpara>This file should contain two properties:</simpara>
<programlisting language="ini" linenumbering="unnumbered">config-decorator-class=org.jpos.q2.freemarker.FreemarkerDecorationProvider    <co xml:id="CO23-1"/>
config-files=cfg/config.properties                                            <co xml:id="CO23-2"/></programlisting>
<calloutlist>
<callout arearefs="CO23-1">
<para>This property tells Q2 to use the FreemarkerDecoratorProvider as its decorator.</para>
</callout>
<callout arearefs="CO23-2">
<para>This property defines a comma separated list of files which will be used as
configuration files.</para>
</callout>
</calloutlist>
</section>
<section xml:id="_introduction_2">
<title>Introduction</title>
<simpara>A typical jPOS-EE application has this standard directory structure:</simpara>
<literallayout class="monospaced">.
|-- cfg
|   |-- README.txt
|   `-- db.properties
|-- deploy
|   |-- 00_logger.xml
|   `-- 99_sysmon.xml
|-- lib
|-- log
|   `-- q2.log
`-- q2.jar</literallayout>
<simpara>Whatever descriptor you install inside the <emphasis>deploy</emphasis> directory gets immediately deployed.
Once this descriptor is removed, it gets undeployed.</simpara>
<simpara>Many of these descriptors require information specific to the target environment, such as
hostnames, ports, ports to listen to, etc. Wouldn&#8217;t it be great if you could define all of
these in a single location?</simpara>
<simpara>The FrameMarker decorator processes <emphasis role="strong">ANY</emphasis> descriptor in memory giving Q2 the resulting text after processing.
This opens a myriad of opportunities, such as declaring macros, and executing them :)</simpara>
<simpara>Let&#8217;s see an example! Let&#8217;s assume you have a file <emphasis>cfg/config.properties</emphasis> in your runtime directory that looks like this:</simpara>
<programlisting language="ini" linenumbering="unnumbered">###### GENERAL INFO
NODE = NODE001
######  Environment
env=DEV
######  Ports we listens to
server_listen_port = 9999
######  Target host information
myBankHostPrimary=app.yourbank.com
myBankPortPrimary=2000
###### DEBUG STUFF
debugParticipant=true</programlisting>
<simpara>and we had a deployable file: <emphasis>deploy/10_mybank_channel.xml</emphasis></simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;channel-adaptor
      name="mybank-channel-adaptor-pri"
      class="org.jpos.q2.iso.ChannelAdaptor" logger="Q2"&gt;

    &lt;channel
          name="mybank-channel-pri"
          packager="org.jpos.iso.packager.GenericPackager"
          class="org.jpos.iso.channel.CSChannel" logger="Q2"
          realm="channel.mybank"&gt;

        &lt;property name="timeout" value="3600000"/&gt;
        &lt;property name="host" value="${mybankHostPrimary}"/&gt;
        &lt;property name="port" value="${mybankPortPrimary}"/&gt;
        &lt;property name="packager-config" value="cfg/packager/mybank.xml" /&gt;
        &lt;property name="keep-alive" value="true" /&gt;
    &lt;/channel&gt;

    &lt;in&gt;from-mybank-pri&lt;/in&gt;
    &lt;out&gt;to-mybank-pri&lt;/out&gt;
    &lt;reconnect-delay&gt;5000&lt;/reconnect-delay&gt;
&lt;/channel-adaptor&gt;</programlisting>
<simpara>As you can see, we externalized the deployable&#8217;s configurable over to a central location.</simpara>
<tip>
<simpara>If you change the settings in the configuration file, you still need to redeploy the deployable (touch it).</simpara>
</tip>
<simpara>But wait, there&#8217;s more! FreeMarker being a macro processor, brings a lot of nice things for things like TransactionManager descriptors:</simpara>
<simpara>For example, ever wanted to have conditional participants?</simpara>
<programlisting language="xml" linenumbering="unnumbered">    [#if debugParticipant == 'true']
    &lt;participant class="org.jpos.transaction.Debug" logger="Q2" realm="debug"&gt;
        &lt;property name="checkpoint" value="debug"/&gt;
    &lt;/participant&gt;
    [/#if]</programlisting>
<simpara>Or maybe define a macro for things you&#8217;ll use over and over?</simpara>
<programlisting language="xml" linenumbering="unnumbered">    [#macro OutputToSyslog msg]
    &lt;participant class="com.mycorp.txn.OutputToSyslog"
        logger="Q2" realm="output-to-syslog"&gt;
        &lt;property name="node" value="${NODE}"/&gt;
        &lt;property name="message" value="${msg}"/&gt;
    &lt;/participant&gt;
    [/#macro]

    &lt;!-- And then invoke it --&gt;
    &lt;group name="myGroup"&gt;
        [@OutputToSyslog msg="This is a test"/]
        .... Do some other stuff
    &lt;/group&gt;</programlisting>
</section>
</section>
<section xml:id="_groovy_support">
<title>Groovy Support</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Add Groovy support.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Since 2.2.1.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/groovy.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Allows seamless integration with Groovy from Q2 applications.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Experimental.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Maven Coordinates</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;dependency&gt;
            &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
            &lt;artifactId&gt;jposee-groovy&lt;/artifactId&gt;
            &lt;version&gt;${jposee.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<note>
<simpara>Although not strictly required by this particular QBean Groovy adaptor, the <literal>jposee-groovy</literal>
module also includes the handy <literal>groovy-sql</literal> dependency.</simpara>
</note>
<simpara>In all the modules described below, the <literal>src</literal> attribute honors the <literal>${...}</literal> syntax.
So, you could have, for example, <literal>src="${groovy.scriptdir}/MyGroovyScript.groovy</literal>.</simpara>
<simpara>You can explicitly resolve the value from a system property using <literal>$sys{...}</literal>, or from
the environment using <literal>$env{...}</literal>.</simpara>
<section xml:id="_groovy_qbean">
<title>Groovy QBean</title>
<simpara>In jPOS 2.0.7 (and later), <literal>QFactory.properties</literal> maps the <literal>groovy</literal> keyword to
<literal>org.jpos.q2.qbean.Groovy</literal> so one can use a simple configuration like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;groovy logger='Q2' src='deploy/test.groovy' /&gt;</programlisting>
<simpara>or</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;groovy logger='Q2'&gt;&lt;![CDATA[
  // ... your groovy code here
]]&gt;&lt;/groovy&gt;</programlisting>
<simpara>The following variables are automatically exposed:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>log</literal> has a refererence to the QBean&#8217;s <literal>Log</literal> object</simpara>
</listitem>
<listitem>
<simpara><literal>qbean</literal> has a reference to the running QBean</simpara>
</listitem>
<listitem>
<simpara><literal>cfg</literal> has a reference to the QBean&#8217;s configuration</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_groovyparticipant">
<title>GroovyParticipant</title>
<simpara>The module provides a <literal>org.jpos.transaction.participant.GroovyParticipant</literal> class, which allows
the writing TransactionManager <literal>TransactionParticipant</literal>'s in Groovy.</simpara>
<simpara>Separate scripts can be specified for the <literal>prepare</literal>, <literal>prepare-for-abort</literal>, <literal>commit</literal>, and <literal>abort</literal> phases
of the participant.</simpara>
<simpara>The <literal>prepare</literal> and <literal>prepare-for-abort</literal> methods are expected to return an <literal>Integer</literal> object
with the TransactionManager standard result values (<literal>PREPARED</literal>, <literal>ABORTED</literal>, etc.).</simpara>
<simpara>The Groovy script code can be placed as part of the element&#8217;s content (a CDATA section
is recommended), or in an external file pointed to by the <literal>src</literal> attribute. We also
recommend adding a <literal>realm</literal> attribute to identify errors in the logs, especially if you
have several instances of <literal>GroovyParticipant</literal> in your transaction manager.</simpara>
<simpara>The following variables will be bound to each Groovy script&#8217;s <literal>Binding</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">id</emphasis> - the transaction <literal>int id</literal> passed to the participant&#8217;s method</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">ctx</emphasis> - the transaction <literal>Serializable ctx</literal> passed to the participant&#8217;s method</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">log</emphasis> - a reference to <literal>this</literal> instance (since this class extends <literal>org.jpos.util.Log</literal>)</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">cfg</emphasis> - this <literal>TransactionParticipant</literal>'s <literal>Configuration</literal> properties</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">tm</emphasis> - a reference to the <literal>TransactionManager</literal>'s executing this transaction</simpara>
</listitem>
</itemizedlist>
<simpara>By default, scripts are pre-compiled by a <literal>GroovyClassLoader</literal>. If you want the script
to be evaluated on each run, then set the <literal>compiled</literal> property to <literal>false</literal>.</simpara>
<simpara>If your script depends on other scripts, you can add one or more <literal>classpath</literal> properties.</simpara>
<simpara>Add a transaction participant like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;participant class="org.jpos.transaction.participant.GroovyParticipant"
             logger="Q2" realm="groovy-test"&gt;

  &lt;property name="classpath" value="cfg/scripts" /&gt;

  &lt;prepare src="deploy/prepare.groovy" /&gt;
  &lt;commit src="deploy/commit.groovy" /&gt;
  &lt;abort&gt;
    &lt;![CDATA[
        import static org.jpos.transaction.TransactionConstants.*
        // ... embedded script
        return PREPARED
    ]]&gt;
  &lt;/abort&gt;
&lt;/participant&gt;</programlisting>
</section>
<section xml:id="_groovyrequestlistener">
<title>GroovyRequestListener</title>
<simpara>The module provides a <literal>org.jpos.groovy.GroovyRequestListener</literal> class, which allows the writing of
<literal>org.jpos.iso.ISORequestListener</literal>'s in Groovy.</simpara>
<simpara>The script&#8217;s return value will be used as the return value from the <literal>process</literal> method.
A non-null return value is interpreted to be <emphasis>true-ish</emphasis>. An explicit <literal>null</literal> return is interpreted to be <literal>false</literal>.
A <literal>boolean/Boolean</literal> value will be returned as such.</simpara>
<simpara>The Groovy script code can be given as text within the <literal>&lt;script&gt;</literal> element (a <literal>CDATA</literal> section
is recommended), or in an external file pointed to by the <literal>src</literal> attribute. The <literal>src</literal> path attribute will
override the text /<literal>CDATA</literal> script (to avoid confusion, only one of the options should be used).</simpara>
<simpara>By default, scripts are pre-compiled by a <literal>GroovyClassLoader</literal>. If you want the script
to be evaluated each time, then set the <literal>compiled</literal> property to <literal>false</literal>.</simpara>
<simpara>As a convenience, a comma-separated list of <emphasis>ISO-8583</emphasis> MTI&#8217;s can be given in the <literal>whitelist</literal> property.
If given, the script will be called <emphasis>only</emphasis> for requests having those MTI&#8217;s. For requests not in the
whitelist, the <literal>ISORequestListener#process(ISOSource, ISOMsg)</literal> method will return <literal>false</literal>, so the
request can be handled by another <literal>ISORequestListener</literal> down the line.</simpara>
<simpara>The following variables will be bound to the Groovy script&#8217;s <literal>Binding</literal>:</simpara>
<itemizedlist>
<listitem>
<simpara><emphasis role="strong">message</emphasis> - the <literal>ISOMsg</literal> for this request</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">source</emphasis> - the <literal>ISOSource</literal> for message</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">log</emphasis> - a reference to <literal>this</literal> instance (since this class extends <literal>org.jpos.util.Log</literal>)</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">cfg</emphasis> - this <literal>ISORequestListener's</literal> <literal>Configuration</literal> properties</simpara>
</listitem>
<listitem>
<simpara><emphasis role="strong">xmlCfg</emphasis> - this <literal>ISORequestListener's</literal> configuration <literal>Element</literal></simpara>
</listitem>
</itemizedlist>
<simpara>We also recommend adding a <literal>realm</literal> attribute to the <literal>&lt;request-listener&gt;</literal> element, to identify errors in the logs.</simpara>
<section xml:id="_examples">
<title>Examples:</title>
<simpara>A Groovy script given as embedded text in a <literal>CDATA</literal> section. The script will be pre-compiled, and called
only for requests of the MTI&#8217;s given in the <literal>whitelist</literal> property.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;request-listener class="org.jpos.groovy.GroovyRequestListener"
                  logger="Q2" realm="groovy-test-one"&gt;
  &lt;property name="whitelist" value="0100, 0420" /&gt;
  &lt;script&gt;
    &lt;![CDATA[
        // ... embedded script
    ]]&gt;
  &lt;/script&gt;
&lt;/request-listener&gt;</programlisting>
<simpara>A Groovy script given in an external file. The <literal>compiled</literal> property is set to <literal>false</literal>, so the script
will be interpreted and evaluated for each request. The script will be called for <emphasis>all</emphasis> MTI&#8217;s.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;request-listener class="org.jpos.groovy.GroovyRequestListener"
                  logger="Q2" realm="groovy-test-two"&gt;
  &lt;property name="compiled" value="false" /&gt;
  &lt;script src="../cfg/reqlistener2.groovy" /&gt;
&lt;/request-listener&gt;</programlisting>
</section>
</section>
<section xml:id="_groovygroupselector">
<title>GroovyGroupSelector</title>
<simpara>The module also provides a <literal>org.jpos.transaction.participant.GroovyGroupSelector</literal> class, which allows the writing of
<literal>GroupSelector</literal>'s in Groovy.</simpara>
<section xml:id="_examples_2">
<title>Examples:</title>
<programlisting language="xml" linenumbering="unnumbered">&lt;participant class="org.jpos.transaction.participant.GroovyGroupSelector" logger="Q2"
    realm="groovy-select"&gt;

        &lt;select src="deploy/select.groovy" /&gt;
        &lt;property name="0800" value="network" /&gt;
        &lt;property name="0200" value="supported" /&gt;
&lt;/participant&gt;</programlisting>
<simpara>A Groovy script given in an external file.</simpara>
<programlisting language="groovy" linenumbering="unnumbered">import org.jpos.iso.ISOMsg;
import org.jpos.transaction.Context;
import org.jpos.transaction.ContextConstants;

ISOMsg m = (ISOMsg) ((Context)ctx).get (ContextConstants.REQUEST.toString());
String groups = cfg.get (m.getMTI(), null);
return groups;</programlisting>
</section>
</section>
</section>
<section xml:id="cryptoservice">
<title>Crypto Service</title>
<simpara>The <literal>cryptoservice</literal> module uses AES-256 to encrypt sensitive data, such as
primary account numbers and protects the encryption key using PGP.</simpara>
<simpara>At start-up time, and at regular intervals, the crypto service generates a
new AES-256 key, encrypts it using PGP using one or more recipient ids (custodians),
and stores the resulting encrypted message in the sysconfig table, using the
"key." prefix, and a unique key UUID, i.e.:</simpara>
<screen linenumbering="unnumbered">id: key.f55fe6ec-ed9e-47a1-a0fe-c63dcbf128cb
value:
-----BEGIN PGP MESSAGE-----
Version: BCPG v1.56

hQEMA6Nw6GrTY6BpAQgAs1pUIK3n2FkMyNmfxSZgpPMNFKz39TcfExiwDRtuw+Zg
wRgFw86SJiL1BB+IE+mPAeCz4hrUkzliiu/760NiXHQysIasWEvUZZqFRA+ecNrk
zARgB8vgGTNgxPHoYPafVD5TrxY9LdRpJcO//Wm2fEVw0xc4Q7vxbH7e9gDQfiuA
gcNYk96rVCdbZFKxyMC8fpM9ng6M4V9lxp5TXihzJQEKHWavctIrU2rBolE1WCY2
Oobs1hELW4rfMpVwfGQDtxcFSNDYkd9IO/WnFTtTAxGHs0u1/miRVxNHadLINdke
wXx6au9vq12tqlYaJY+BAEtJaAInwwT5/irHj5dlwtJ0AW2wO3Mwh+A+pGJvSd2T
xyep1pNtm7tMbisZyms0TiGz+6BX6F5ZKCG5UuvsIvTHd/VLp2uajE5NVPe92Y1F
lLbbMyUfxzBwNhwhdfOEWwRAmrt7AbMyAQHUCZAXgwXn7SXsdh8TTzLMsssViD9+
h7lfP9w=
=YyZk
-----END PGP MESSAGE-----</screen>
<simpara>The key is used to encrypt subsequent data for a given period of time
(defaults to one day) until a new key is automatically generated.</simpara>
<simpara>Here is a sample usage:</simpara>
<programlisting language="java" linenumbering="unnumbered">   private void encryptCardData (TLCapture tl, Card card)      <co xml:id="CO24-1"/>
      throws Exception {
        Map&lt;String,String&gt; m = new HashMap&lt;&gt;();
        m.put ("P", card.getPan());
        m.put ("E", card.getExp());
        SecureData sd = getCryptoService().aesEncrypt(         <co xml:id="CO24-2"/>
           Serializer.serializeStringMap(m)
        );
        tl.setKid(sd.getId());                                 <co xml:id="CO24-3"/>
        tl.setSecureData(sd.getEncoded());                     <co xml:id="CO24-4"/>
    }</programlisting>
<calloutlist>
<callout arearefs="CO24-1">
<para>TLCapture in this example is a general purpose capture table.</para>
</callout>
<callout arearefs="CO24-2">
<para><literal>getCryptoService()</literal> just locates the <literal>CryptoService</literal> using the <literal>NameRegistrar</literal></para>
</callout>
<callout arearefs="CO24-3">
<para><literal>kid</literal> stands for Key ID, we store the key UUID here</para>
</callout>
<callout arearefs="CO24-4">
<para><literal>secureData</literal> is a general purpose blob</para>
</callout>
</calloutlist>
<simpara>The crypto service can be configured using a QBean descriptor like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;crypto-service class='org.jpos.crypto.CryptoService' logger='Q2'&gt;
    &lt;property name="custodian" value='demo@jpos.org' /&gt;               <co xml:id="CO25-1"/>
    &lt;property name="pubkeyring" value='cfg/keyring.pub' /&gt;            <co xml:id="CO25-2"/>
    &lt;property name="privkeyring" value='cfg/keyring.priv' /&gt;          <co xml:id="CO25-3"/>
    &lt;property name="lazy" value="false" /&gt;                            <co xml:id="CO25-4"/>
    &lt;property name="keylength" value="256" /&gt;                         <co xml:id="CO25-5"/>
    &lt;property name="duration" value="86400000" /&gt;                     <co xml:id="CO25-6"/>
    &lt;property name="ttl" value="3600000" /&gt;                           <co xml:id="CO25-7"/>
    &lt;ks-provider
    class="org.jpos.crypto.SysConfigCryptoServiceKeyStoreProvider" /&gt; <co xml:id="CO25-8"/>
&lt;/crypto-service&gt;</programlisting>
<calloutlist>
<callout arearefs="CO25-1">
<para>custodian PGP id, there can be many <literal>custodian</literal> entries.</para>
</callout>
<callout arearefs="CO25-2">
<para>path to the public keyring.</para>
</callout>
<callout arearefs="CO25-3">
<para>path to the password-protected private keyring.</para>
</callout>
<callout arearefs="CO25-4">
<para>if lazy=true, a key is generated the first time we call <literal>aesEncrypt</literal>, otherwise, a new one is created at service start.</para>
</callout>
<callout arearefs="CO25-5">
<para>key length defaults to 256. Can be reduced if AES-256 is not supported by the JVM due to export restrictions.</para>
</callout>
<callout arearefs="CO25-6">
<para>key duration</para>
</callout>
<callout arearefs="CO25-7">
<para>internal key cache time-to-live (in millis).</para>
</callout>
<callout arearefs="CO25-8">
<para>CryptoServiceKeyStoreProvider class configuration.</para>
</callout>
</calloutlist>
<tip>
<simpara>We currently support two CryptoServiceKeyStoreProvider classes:
<literal>SysConfigCryptoServiceKeyStoreProvider</literal> and <literal>JESpaceCryptoServiceKeyStoreProvider</literal></simpara>
</tip>
<simpara>This allows jPOS nodes to encrypt data securely without storing the encryption key to disk.</simpara>
<note>
<simpara>The transient encryption key is still in memory, so core dumps and swap should be
disabled at the operating system level. This approach is still more secure
than obfuscating encryption keys.</simpara>
</note>
<simpara>Decryption&#8201;&#8212;&#8201;that can of course run in a different node, at a different time&#8201;&#8212;&#8201;requires
access to the private keyring, with its optional password. Said password can be entered
manually, obtained from a remote service or HSM, etc. and it&#8217;s a two step process.</simpara>
<simpara>First the key has to be <emphasis>loaded</emphasis> into memory, using the <literal>loadKey</literal> method. Once the key
is loaded, the <literal>aesDecrypt</literal> can be called.</simpara>
<simpara>These are the method&#8217;s signatures:</simpara>
<programlisting language="java" linenumbering="unnumbered"> public void loadKey (String jobId, String keyId, char[] password) throws Exception;
 public byte[] aesDecrypt (String jobId, String keyId, byte[] encoded) throws Exception;</programlisting>
<simpara>Here <literal>keyId</literal>, <literal>password</literal>, and <literal>encoded</literal> cryptogram don&#8217;t require too much explanation, but <literal>jobId</literal> does
and here is the rationale. We could have a one-shot <literal>aesDecrypt</literal> method accepting the private key password,
but decrypting the AES-256 key using PGP is an expensive operation. In situations
where you have to extract a daily file, probably encrypted by just a handful keys, you don&#8217;t want to decrypt
the key on every <literal>aesDecrypt</literal> call. We don&#8217;t want to expose the key to the caller either, so the CryptoService
keeps it in a private field. In order to do that, <literal>loadKey</literal> caches the key (until it&#8217;s unloaded), so it&#8217;s
cheap to call <literal>loadKey</literal> followed by <literal>aesDecrypt</literal>, after the first call where the key is actually decrypted,
subsequent calls will be pretty fast.</simpara>
<simpara>In order to protect different clients from accessing keys loaded by other ones, we use a <literal>jobId</literal> that can be something as
simple as a <literal>UUID</literal> or any nonce, only known to the caller. That <literal>jobId</literal> can then be used to <literal>unload</literal> those keys, using the
<literal>unloadKey</literal> and <literal>unloadAll</literal> methods:</simpara>
<programlisting language="java" linenumbering="unnumbered">    public boolean unloadKey (String jobId, String keyId);
    public void unloadAll(String jobId);</programlisting>
<simpara>There&#8217;s also a no-args <literal>unloadAll()</literal> that unloads all keys, and should be used with care.</simpara>
<simpara>For some use cases (i.e. long running crypto-service based micro-service), it is possible to "UNLOCK" the system by calling</simpara>
<programlisting language="java" linenumbering="unnumbered">    public boolean unlock (char[] password);</programlisting>
<simpara>For completeness, there&#8217;s also a <literal>lock()</literal> method.</simpara>
<note>
<simpara>In order to simplify development and testing, and eventually to troubleshoot problems, we&#8217;ve
also created a couple of CLI commands: <literal>encrypt</literal>, <literal>decrypt</literal>, <literal>lock</literal> and <literal>unlock</literal> in the <literal>crypto</literal> CLI subsystem.</simpara>
</note>
<tip>
<simpara>If you&#8217;re accessing the CLI using the command line <literal>q2 --cli</literal>, remember that the default <literal>deployDir</literal> is
<literal>deploy-cli</literal> instead of <literal>deploy</literal>. You need a copy (or symlink) of <literal>25_cryptoservice.xml</literal> in that
directory.</simpara>
<simpara>If you <literal>ssh</literal> to a running Q2 to reach the CLI, then you can ignore this tip.</simpara>
</tip>
<simpara>For testing purposes, it is possible to set the <literal>unlock-password</literal> property in the
crypto service configuration QBean, i.e.:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;property name="unlock-password" value="demo" /&gt;</programlisting>
<note>
<simpara>This is of course highly insecure, the whole PGP based crypto service scheme makes
no sense at all when unlocking the private key in such a way.</simpara>
</note>
<section xml:id="_using_gnupg_to_generate_keys">
<title>Using GnuPG to generate keys</title>
<itemizedlist>
<listitem>
<simpara>Generate key</simpara>
</listitem>
</itemizedlist>
<screen linenumbering="unnumbered">gpg --full-generate-key</screen>
<itemizedlist>
<listitem>
<simpara>Export custodian public keys into keyring.pub</simpara>
</listitem>
</itemizedlist>
<screen linenumbering="unnumbered">gpg --armor --export xxx@domain.com yyy@domain.com &gt; cfg/keyring.pub</screen>
<itemizedlist>
<listitem>
<simpara>Export custodian private keys into keyring.priv</simpara>
</listitem>
</itemizedlist>
<screen>gpg --armor --export-secret-keys xxx@domain.com yyy@domain.com &gt; cfg/keyring.priv</screen>
</section>
</section>
<section xml:id="_crypto_server">
<title>Crypto Server</title>
<simpara>The <literal>cryptoserver</literal> module offers a REST (qrest based) API to encrypt and decrypt using the <literal>cryptoservice</literal>.</simpara>
<simpara>It supports the following operations</simpara>
<section xml:id="_encrypt">
<title>encrypt</title>
<itemizedlist>
<listitem>
<simpara>Path: <literal>/encrypt</literal></simpara>
</listitem>
<listitem>
<simpara>Body:</simpara>
</listitem>
</itemizedlist>
<programlisting language="json" linenumbering="unnumbered">{
  "text" : "The quick brown fox jumps over the lazy dog 0123456789"
}</programlisting>
<simpara>Sample response:</simpara>
<programlisting language="json" linenumbering="unnumbered">{
    "kid": "d7e82270-7041-4434-8cf9-c4d0f26f620d",
    "cryptogram": "rp5uz7QMjRaEqPIbXzOZNI6bLuWYcdP0sH3I0FSKpRk...."
}</programlisting>
</section>
<section xml:id="_decrypt">
<title>decrypt</title>
<itemizedlist>
<listitem>
<simpara>Path: <literal>/decrypt</literal></simpara>
</listitem>
<listitem>
<simpara>Body:</simpara>
</listitem>
</itemizedlist>
<programlisting language="json" linenumbering="unnumbered">{
    "kid": "d7e82270-7041-4434-8cf9-c4d0f26f620d",
    "cryptogram": "rp5uz7QMjRaEqPIbXzOZNI6bLuWYcdP0sH3I0FSKpRk...."
}</programlisting>
<programlisting language="json" linenumbering="unnumbered">{
  "text" : "The quick brown fox jumps over the lazy dog 0123456789"
}</programlisting>
<note>
<simpara>The node running <literal>cryptoserver</literal> has to be <literal>unlocked</literal> (see <xref linkend="cryptoservice"/> module).</simpara>
</note>
</section>
</section>
</chapter>
<chapter xml:id="_simulators">
<title>Simulators</title>
<section xml:id="_server_simulator">
<title>Server Simulator</title>
<informaltable xml:id="server-simulator" frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The Server Simulator is an extremely simple, BSH-based simulator
                    that can be used to test ISO-8583 based client software. It listens to
                    port (default 10000), and forwards all incoming requests to a BeanShell
                    based script that can be customized to meet your needs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">How:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Posted by the jPOS-EE team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/server-simulator available in the
                    repository at GitHub.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>When writing ISO-8583 based client applications
                    the ability to easily simulate a server is usually very useful.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Dependencies:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>module jpos</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>The server simulator is a simple QServer with a BSHRequestListener that
handle incoming messages and provide suitable responses.</simpara>
<simpara>The default configuration uses an XMLChannel along with an XMLPackager,
but you are free to use any channel/packager combination.</simpara>
<simpara>The BSHRequestListener (documented in jPOS programmer&#8217;s guide) exposes
two objects: message (the incoming ISOMsg) and source (the ISOSource).</simpara>
<simpara>Here is the default configuration (05_serversimulator.xml):</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;server class="org.jpos.q2.iso.QServer" logger="Q2" name="simulator_10000"&gt;
  &lt;attr name="port" type="java.lang.Integer"&gt;10000&lt;/attr&gt;
  &lt;channel class="org.jpos.iso.channel.XMLChannel"
         logger="Q2" packager="org.jpos.iso.packager.XMLPackager"&gt;
  &lt;/channel&gt;
  &lt;request-listener class="org.jpos.bsh.BSHRequestListener" logger="Q2"&gt;
   &lt;property name="source" value="cfg/serversimulator.bsh" /&gt;
  &lt;/request-listener&gt;
 &lt;/server&gt;</programlisting>
<simpara>And the BSH script looks like this:</simpara>
<programlisting language="java" linenumbering="unnumbered">   message.setResponseMTI ();                                            <co xml:id="CO26-1"/>

   Random random = new Random (System.currentTimeMillis());
   message.set (37, Integer.toString(Math.abs(random.nextInt()) % 1000000));
   message.set (38, Integer.toString(Math.abs(random.nextInt()) % 1000000));

   if ("000000009999".equals (message.getString (4)))                    <co xml:id="CO26-2"/>
       message.set (39, "01");
   else
       message.set (39, "00");

   source.send (message);</programlisting>
<calloutlist>
<callout arearefs="CO26-1">
<para>Sets the response MTI (i.e: 0800/0810, 1201/1220&#8230;&#8203;)</para>
</callout>
<callout arearefs="CO26-2">
<para>We use the special amount value $99.99 to decline the transaction</para>
</callout>
</calloutlist>
<tip>
<simpara><emphasis role="strong">Never ever</emphasis> use this simulator even close to a production environment,
or you may end up blindly authorizing transactions.</simpara>
</tip>
</section>
<section xml:id="_client_simulator">
<title>Client Simulator</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The Client Simulator can be used to fire a suite of unit tests
against an ISO-8583 server. The suite is defined by a set of XML files
representing messages to be sent and their expected responses.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">How:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Posted by the jPOS-EE team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory <literal>modules/client-simulator</literal> available in the repository at GitHub.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>When writing ISO-8583 based server applications the ability to
easily simulate a client is usually very useful. We at jPOS.org use it
as a high level self test for our applications.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Dependencies:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>module jpos</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>In order to simulate complex ISO-8583 interchanges, the client simulator
uses BSH scripting support to customize the content of ISO-8583 fields
at runtime. This can be used to specify constant values, such as
terminal IDs, merchant IDs, card numbers, as well as dynamic values such
as trace numbers, retrieval reference numbers, pinblocks, key exchange
related stuff, etc.</simpara>
<simpara>Let&#8217;s have a look at the simulator&#8217;s QBean configuration:</simpara>
<programlisting language="xml" linenumbering="unnumbered">    &lt;qbean name="clientSimulator" logger="Q2" realm="client-simulator"
          class="org.jpos.simulator.TestRunner"&gt;

     &lt;property name="mux"     value="clientsimulator-mux" /&gt;
     &lt;property name="timeout" value="30000" /&gt;
     &lt;property name="sessions" value="1" /&gt;</programlisting>
<simpara>We specify a mux (that&#8217;s the name of a QMUX running on the same JVM) and
a timeout to wait for a given response. Then we define an initialization
block, i.e:</simpara>
<programlisting language="xml" linenumbering="unnumbered">     &lt;init&gt;
        import org.jpos.space.*;
        int cnt = 1;
        String terminal = "29110001";
        String merchant = "000000001001";
        String pinblk   = "0123456789ABCDEF";
        Space sp = SpaceFactory.getSpace();
     &lt;/init&gt;</programlisting>
<simpara>The initialization block is basically a BSH script. You can do whatever
you want there, such as defining constants for later use, references to
jPOS objects (such as Space instances, Security module, etc.).</simpara>
<simpara>And then the test suite:</simpara>
<programlisting language="xml" linenumbering="unnumbered">     &lt;test-suite&gt;
      &lt;path&gt;cfg/&lt;/path&gt;
      &lt;test file="echo" count="10" continue="yes" name="Simple Echo Test" /&gt;
      &lt;test file="echo" count="20" continue="yes" name="Simple Echo Test 2"&gt;
       &lt;init&gt;
        // optional init script
        // the variable 'testcase'references  _this_ testcase instance
        // the variable 'request' references the ISOMsg that is to be sent
       &lt;/init&gt;
       &lt;post&gt;
        // optional post script
        // the variable 'testcase' references  _this_ testcase instance
        // the variable 'response' references the received message
       &lt;/post&gt;
      &lt;/test&gt;

      &lt;path&gt;cfg/anotherpath&lt;/path&gt;
      &lt;test file="mytest"&gt;MyTest&lt;/test&gt;
      ...
      ...
     &lt;/test-suite&gt;
   &lt;/qbean&gt;</programlisting>
<simpara>The suite can be separated in different paths, in the previous example,
we assume that there exist two template files named: <literal>cfg/echo_s</literal> and <literal>cfg/echo_r</literal>.</simpara>
<simpara>The letter <emphasis role="strong">s</emphasis> in <literal>cfg/echo_s</literal> stands for <emphasis role="strong">send</emphasis> and the <emphasis role="strong">r</emphasis> in <literal>cfg/echo_r</literal>
stands for <emphasis role="strong">receive</emphasis>.</simpara>
<simpara><literal>cfg/echo_s</literal>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;isomsg&gt;
    &lt;field id="0" value="1800" /&gt;
    &lt;field id="7" value="1025080500" /&gt;
    &lt;field id="11" value="000001" /&gt;
    &lt;field id="41" value="29110001" /&gt;
   &lt;/isomsg&gt;</programlisting>
<simpara><literal>cfg/echo_r</literal>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;isomsg&gt;
    &lt;field id="0" value="1810" /&gt;
    &lt;field id="39" value="00" /&gt;
   &lt;/isomsg&gt;</programlisting>
<tip>
<simpara>If the response template file (i.e. <literal>echo_r</literal> in the previous example) is
not present, client simulator blindly sends the message to the server,
ignoring the response. A <emphasis>response ignored</emphasis> note is added to the test log.</simpara>
</tip>
<simpara>In the previous example, we send a 1800 message with some fixed data,
and we expect to receive a 1810 message, with a 00 content in field 39.</simpara>
<simpara>While using fixed content may be okay for most fields and test cases,
there are situations where you want to use dynamic content.</simpara>
<simpara>Our simulator supports BSH scripts at the field level. Everything that
starts with a bang character (<emphasis role="strong">!</emphasis>) is considered a script and evaluated as
such, so you can write:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;isomsg&gt;
    &lt;field id="0" value="1800" /&gt;
    &lt;field id="7" value="ISODate.getANSIDate (new Date())" /&gt;
    &lt;field id="11" value="! System.currentTimeMillis() % 1000000" /&gt;
    &lt;field id="41" value="! terminal" /&gt;
    &lt;field id="52" value="# pinblk" /&gt;
   &lt;/isomsg&gt;</programlisting>
<simpara>Please note that in our example terminal is a runtime script variable
that we&#8217;ve defined in our block. The <emphasis><emphasis role="strong">#</emphasis></emphasis> characters operates in a
similar way as the <emphasis><emphasis role="strong">!</emphasis></emphasis> character, but the resulting value, which is
supposed to be an hexadecimal string, is converted to <literal>byte[]</literal> using
<literal>ISOUtil.hex2byte(String)</literal> in order to produce an <literal>ISOBinaryField</literal>.</simpara>
<simpara>The same thing happens at receive time, when we are trying to simulate
voids, reversals, we usually need information received in previous
transactions, such as retrieval reference numbers, audit numbers, etc.
so we can save that information for later use using a receive-time
script:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;isomsg&gt;
    &lt;field id="0" value="1810" /&gt;
    &lt;field id="11" value="! previousTrace=value" /&gt;
    &lt;field id="37" value="! rrn=value" /&gt;
    &lt;field id="39" value="00" /&gt;
   &lt;/isomsg&gt;</programlisting>
<simpara>There&#8217;s a special variable name called <literal>value</literal> where we put the received
content, so in the previous example, the received retrieval reference
number (field 37), is stored in the variable named <literal>rrn</literal> for later use.</simpara>
<simpara>The receive script may optionally return true or false, so we can write
code like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;isomsg&gt;
    &lt;field id='39' value='! return value.equals(EXPECTED_RETVALUE)' /&gt;
   &lt;/isomsg&gt;</programlisting>
<simpara>where <literal>EXPECTED_RETVALUE</literal> is initialized in a previous init block.</simpara>
<simpara>In fact, the previous example is equivalent to the following:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;isomsg&gt;
    &lt;field id='39' value='! EXPECTED_RETVALUE' /&gt;
   &lt;/isomsg&gt;</programlisting>
<simpara>where the string value of EXPECTED_RETVALUE is used (unless it is a
boolean).</simpara>
<simpara>There is a special string <emphasis role="strong">*E</emphasis> to test for echo. To ensure that the
received content of a field is the same as the content we sent, we can
write code like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">   &lt;isomsg&gt;
    &lt;field id='4' value='*E' /&gt;
   &lt;/isomsg&gt;</programlisting>
<note>
<simpara>The special string <emphasis role="strong">*M</emphasis> can be used to check for mandatory field
presence, regardless its content. Likewise, <emphasis role="strong">*E</emphasis> can be used to check
for mandatory echo, and <emphasis role="strong">*O</emphasis> can be used to check for optional echo. You
can also use <emphasis role="strong">*A</emphasis> to check for mandatory <emphasis>absence</emphasis> of a field.</simpara>
</note>
<simpara>Test cases supports a count attribute that can be used to fire the same
test n times.</simpara>
<simpara>It also supports a continue attribute. If continue="yes" then the test
runner would just log an exception if something goes wrong, and it would
continue with the next test.</simpara>
<simpara>The default timeout is 60 seconds, but one can specify a different
timeout using the timeout attribute of the testcase element.</simpara>
<simpara>At the end, you get a ticket with the test results.</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;log realm="org.jpos.simulator.TestRunner" at="......"&gt;
  &lt;results&gt;
    Simple Echo Test        [OK] 58ms.
    Simple Echo Test        [OK] 38ms.
    Simple Echo Test        [OK] 70ms.
    Simple Echo Test        [OK] 23ms.
    Simple Echo Test        [OK] 56ms.
    Simple Echo Test        [OK] 24ms.
    Simple Echo Test        [OK] 73ms.
    Simple Echo Test        [OK] 107ms.
    Simple Echo Test        [OK] 20ms.
    Simple Echo Test        [OK] 50ms.
    Simple Echo Test        [OK] 23ms.
    Simple Echo Test        [OK] 24ms.
    Simple Echo Test        [OK] 86ms.
    Simple Echo Test        [OK] 24ms.
    Simple Echo Test        [OK] 24ms.
    Simple Echo Test        [OK] 23ms.
    Simple Echo Test        [OK] 26ms.
    Simple Echo Test        [OK] 21ms.
    Simple Echo Test        [OK] 22ms.
    Simple Echo Test        [OK] 79ms.
    Simple Echo Test 2      [OK] 22ms.
    elapsed server=893ms(62%),
    simulator=526ms(37%), total=1419ms
  &lt;/results&gt;
&lt;/log&gt;</programlisting>
</section>
</chapter>
<chapter xml:id="_operation_services">
<title>Operation services</title>
<section xml:id="_sshd">
<title>SSHD</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The SSHD let&#8217;s you establish an ssh connection to a running Q2 instance.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE since v2.0.0.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/sshd available in git repository at github.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Remote secure login is an often desired featured in production systems.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Stable.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<formalpara>
<title>Maven Coordinates</title>
<para>
<programlisting language="xml" linenumbering="unnumbered">        &lt;dependency&gt;
            &lt;groupId&gt;org.jpos.ee&lt;/groupId&gt;
            &lt;artifactId&gt;jposee-sshd&lt;/artifactId&gt;
            &lt;version&gt;${jposee.version}&lt;/version&gt;
        &lt;/dependency&gt;</programlisting>
</para>
</formalpara>
<simpara>The SSHD module provides remote secure logic to a running Q2 instance. It features:</simpara>
<itemizedlist>
<listitem>
<simpara>Simple configuration</simpara>
</listitem>
<listitem>
<simpara>Authentication by username/public key.</simpara>
</listitem>
<listitem>
<simpara>Allows for CLI customization through alternate command stores.</simpara>
</listitem>
</itemizedlist>
<simpara>The <literal>setup</literal> process will create a default deployment descriptor in <emphasis>deploy/05_sshd.xml</emphasis>:</simpara>
<programlisting language="xml" linenumbering="unnumbered">&lt;sshd name="sshd" class="org.jpos.ee.cli.SshCLI"&gt;
    &lt;port&gt;2222&lt;/port&gt;                                                    <co xml:id="CO27-1"/>
    &lt;auth-username&gt;admin&lt;/auth-username&gt;                                 <co xml:id="CO27-2"/>
    &lt;authorized-keys-file&gt;cfg/authorized_keys&lt;/authorized-keys-file&gt;     <co xml:id="CO27-3"/>
&lt;/sshd&gt;</programlisting>
<calloutlist>
<callout arearefs="CO27-1">
<para>The SSHD server will listen on this port.</para>
</callout>
<callout arearefs="CO27-2">
<para>The username the ssh client will use to connect to the SSHD server.</para>
</callout>
<callout arearefs="CO27-3">
<para>Points to a file containing public keys for every user who will be able to login</para>
</callout>
</calloutlist>
<simpara>If you have not setup a personal public/private key pair, now it&#8217;s the time to
do this. The instructions we will provide here are for OpenSSH on a Unix system,
but we&#8217;ll provide some links for Windows systems as well.</simpara>
<simpara>To generate your key pair:</simpara>
<screen>$ ssh-keygen -t rsa                                              <co xml:id="CO28-1"/>
Generating public/private rsa key pair.
Enter file in which to save the key (/home/myuser/.ssh/id_rsa):
Enter passphrase (empty for no passphrase):                      <co xml:id="CO28-2"/>
Enter same passphrase again:
Your identification has been saved in /home/myuser/.ssh/id_rsa.  <co xml:id="CO28-3"/>
Your public key has been saved in /home/myuser/.ssh/id_rsa.pub.  <co xml:id="CO28-4"/>
The key fingerprint is:
f6:61:a8:27:35:cf:4c:6d:13:22:70:cf:4c:c8:a0:23 myuser@nexus</screen>
<calloutlist>
<callout arearefs="CO28-1">
<para>The command <literal>ssh-keygen -t rsa</literal> initiated the creation of the key pair.</para>
</callout>
<callout arearefs="CO28-2">
<para>No passphrase was entered (Enter key was pressed instead).</para>
</callout>
<callout arearefs="CO28-3">
<para>The private key was saved in .ssh/id_rsa.</para>
</callout>
<callout arearefs="CO28-4">
<para>The public key is saved in .ssh/id_rsa.pub.</para>
</callout>
</calloutlist>
<simpara>In this case, the content of file id_rsa.pub is:</simpara>
<screen>ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEArkwv9X8eTVK4F7pMlSt45pWoiakFkZMw
G9BjydOJPGH0RFNAy1QqIWBGWv7vS5K2tr+EEO+F8WL2Y/jK4ZkUoQgoi+n7DWQVOHsR
ijcS3LvtO+50Np4yjXYWJKh29JL6GHcp8o7+YKEyVUMB2CSDOP99eF9g5Q0d+1U2WVdB
WQM= myuser@nexus</screen>
<simpara>It is one line in length.</simpara>
<simpara>Its content is then copied to cfg/authorized_keys of your Q2 instance.</simpara>
<simpara>If all is well, you should be able to run your Q2 instance and type:</simpara>
<screen>ssh -p 2222 admin@localhost</screen>
<simpara>And you should be given access to Q2 Remote CLI.</simpara>
<tip>
<simpara>Windows Users can use Putty and use this <link xl:href="http://www.ualberta.ca/CNS/RESEARCH/LinuxClusters/pka-putty.html">link</link>
as a guide to get the contents for the <emphasis>authorized_keys</emphasis> file.</simpara>
</tip>
</section>
</chapter>
<chapter xml:id="_contributed_modules">
<title>Contributed modules</title>
<section xml:id="_fsdmsgx">
<title>FSDMsgX</title>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">What:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>This field/message packager can be used to wire a message parser with java code. Its a utility library that enables you to parse grammar, usually used by text (can be binary as well) messages
that are field separator delimited, fixed length, branching based on data
parsed, looking ahead in the stream for a specific byte and base future
parsing decisions. Provides out of the box PCI compliance and ability to add java objects to meet you compliance needs.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">When:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Available in all versions of jPOS-EE.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Who:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>The jPOS.org team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">How:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Posted by the jPOS-EE team.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Where:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Directory modules/fsdmsgX available in the jPOS-EE main
subversion repository at google code.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Why:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>When schema based FSD does not meet your parsing needs to write more complex parsing rules.</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Status:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>Production grade</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">Dependencies:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara>module jpos</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara><emphasis role="strong">License:</emphasis></simpara></entry>
<entry align="left" valign="top"><simpara><link linkend="appendix_license">GNU Affero General Public License version 3</link></simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<section xml:id="_introduction_to_using_the_packagers">
<title>Introduction to using the packagers</title>
<section xml:id="_fixedfieldpackager">
<title>FixedFieldPackager</title>
<simpara>Consider a specification that states field 1 is a fixed field of 6 and field 2 is a fixed stream of 2 bytes.
Stream of bytes=123456AB
If the specification is followed:
Field1 = 123456
Field2 = AB</simpara>
<example>
<title>FixedFieldPackager Usage [unpacking raw bytes]</title>
<literallayout class="monospaced">FSDMsgX msg = new FSDMsgX("Example1");
FixedFieldPackager field1 = new FixedFieldPackager("Field1", 6, AsciiInterpreter.INSTANCE);
FixedFieldPackager field2 = new FixedFieldPackager("Field2", 2, AsciiInterpreter.INSTANCE);</literallayout>
<literallayout class="monospaced">msg.add(field1);
msg.add(field2);</literallayout>
<literallayout class="monospaced">String s = "123456ABEXTRA";// there are EXTRA bytes in the stream</literallayout>
<literallayout class="monospaced">int offset = msg.unpack(s.getBytes());
System.out.println("Offset="+offset);
System.out.println("Field1="+msg.get("Field1"));
System.out.println("Field2="+msg.get("Field2"));
System.out.println(msg.dump("dump"));
System.out.println(msg.getParserTree("tree&gt;"));
System.out.println(msg.hexDump(""));</literallayout>
</example>
<simpara><emphasis role="strong">Output</emphasis></simpara>
<programlisting language="xml" linenumbering="unnumbered">Offset=8
Field1=123456
Field2=AB
dump&lt;fsdmsgX name="Example1"&gt;
dump	&lt;field id="Field1" value="123456"/&gt;
dump	&lt;field id="Field2" value="AB"/&gt;
dump&lt;/fsdmsgX&gt;
tree&gt;[Example1]
tree&gt;Field [Field1] : Fixed [6] : 123456
tree&gt;Field [Field2] : Fixed [2] : AB
0000  31 32 33 34 35 36 41 42                           123456AB</programlisting>
<itemizedlist>
<listitem>
<simpara>Create the main container object FSDMsgX.</simpara>
</listitem>
<listitem>
<simpara>Create the individual field packagers for field1 and field2.</simpara>
</listitem>
<listitem>
<simpara>Add the individual field packagers to the container.</simpara>
</listitem>
<listitem>
<simpara>Call the unpack method on the input bytes to parse the stream.</simpara>
</listitem>
<listitem>
<simpara>The unpack method returns the offset in the stream where the parser has reached, we parsed a total of 8 bytes, the offset is 8 (its 0 based so its at the 9<superscript>th</superscript> position.</simpara>
</listitem>
<listitem>
<simpara>Notice the fields are accessible via the containers get method.</simpara>
</listitem>
<listitem>
<simpara>The containers dump method, provides a pretty xml ( the prefix of "dump" to identify it in the output.</simpara>
</listitem>
<listitem>
<simpara>The container has a getParseTree method that display your composite packager. This will help once you get into complex composite packager. The use of of the prefix "tree" is used to identify its output.</simpara>
</listitem>
<listitem>
<simpara>The container has a hexdump method that dumps the hex equivalent of the unpacked stream. Notice EXTRA is not there as there was no rule to unpack it.</simpara>
</listitem>
<listitem>
<simpara>If the input string was s = "123456" then an ISOException would be thrown telling you precisely what was wrong.
org.jpos.iso.ISOException: Field [Field2] at offset [6]:Expecting 2 bytes found 0</simpara>
</listitem>
</itemizedlist>
<example>
<title>FixedFieldPackager Usage [packing object into bytes]</title>
<literallayout class="monospaced">FSDMsgX msg = new FSDMsgX("Example1");
FixedFieldPackager field1 = new FixedFieldPackager("Field1", 6, AsciiInterpreter.INSTANCE);
FixedFieldPackager field2 = new FixedFieldPackager("Field2", 2, AsciiInterpreter.INSTANCE);</literallayout>
<literallayout class="monospaced">msg.add(field1);
msg.add(field2);</literallayout>
<literallayout class="monospaced">msg.set("Field1", "ABCDEF");
msg.set("Field2", "12");</literallayout>
<literallayout class="monospaced">byte[] outStream = msg.pack();</literallayout>
<literallayout class="monospaced">System.out.println(msg.dump("dump"));
System.out.println(msg.getParserTree("tree&gt;"));
System.out.println(msg.hexDump(""));
System.out.println(ISOUtil.hexdump(outStream));</literallayout>
</example>
<simpara><emphasis role="strong">Output</emphasis></simpara>
<programlisting language="xml" linenumbering="unnumbered">dump&lt;fsdmsgX name="Example1"&gt;
dump	&lt;field id="Field1" value="ABCDEF"/&gt;
dump	&lt;field id="Field2" value="12"/&gt;
dump&lt;/fsdmsgX&gt;
tree&gt;[Example1]
tree&gt;Field [Field1] : Fixed [6] : ABCDEF
tree&gt;Field [Field2] : Fixed [2] : 12
0000  41 42 43 44 45 46 31 32                           ABCDEF12
0000  41 42 43 44 45 46 31 32                           ABCDEF12</programlisting>
<itemizedlist>
<listitem>
<simpara>Set the fields in the container.</simpara>
</listitem>
<listitem>
<simpara>Call the unpack method on the container to serialize the object into a byte array.</simpara>
</listitem>
<listitem>
<simpara>You can verify that data looks accurate in dump method.</simpara>
</listitem>
<listitem>
<simpara>You can verify that the parser parsed it correctly.</simpara>
</listitem>
<listitem>
<simpara>You can verify the hexdump of the actual packed vyte array outstream is the same as the hexdump of the container.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_variablefieldpackager">
<title>VariableFieldPackager</title>
<simpara>Used when the size of the field is variable and needs a delimiter to indicate the end of the field.</simpara>
<simpara>Consider a specification that indicates a field FirstName can have a maximum of 20 characters and will be terminate/delimited by a semi colon followed by a Lastname with a maximum of 10 characters terminated by a period.
The delimiter is important because one could have a name Tom, Tommy, Thomas to indicate the end of a name a delimiter is needed. If I did bot have a FirstName, a semi colon would be needed to indicate there is no first name.</simpara>
<example>
<title>VariableFieldPackager Usage</title>
<literallayout class="monospaced">@Test
public void unpackTest02() throws ISOException {</literallayout>
<literallayout class="monospaced">VariableFieldPackager f1 = new VariableFieldPackager("F1", 20, new Byte((byte) 0x1c),
		AsciiInterpreter.INSTANCE);
VariableFieldPackager f2 = new VariableFieldPackager("F2", 5, new Byte((byte) 0x1d), AsciiInterpreter.INSTANCE);</literallayout>
<literallayout class="monospaced">FSDMsgX msg = new FSDMsgX("Test1");
msg.add("F1", f1);
msg.add("F2", f2);</literallayout>
<literallayout class="monospaced">String inStream = "123456" + (char) 0x1c + "ABC" + (char) 0x1d;
msg.unpack(inStream.getBytes());</literallayout>
<literallayout class="monospaced">assertEquals("123456", msg.get("F1"));
assertEquals("ABC", msg.get("F2"));</literallayout>
<literallayout class="monospaced">FSDMsgX msg2 = new FSDMsgX("Test2");
msg2.add("F1", f1);
msg2.add("F2", f2);
byte[] outStream = msg2.pack();</literallayout>
<literallayout class="monospaced">	System.out.println(msg2.getParserTree("Msg2"));
	assertArrayEquals(inStream.getBytes(), outStream);
	System.out.println(msg2.hexDump(""));
	System.out.println(msg.hexDump(""));
}</literallayout>
</example>
<simpara><emphasis role="strong">Output</emphasis></simpara>
<programlisting language="xml" linenumbering="unnumbered">Msg2[TestPack]
Msg2Field [F1] : VAR[0..20] delimiter[0x1C] or EOM  : 123456
Msg2Field [F2] : VAR[0..5] delimiter[0x1D] or EOM  : ABC
0000  31 32 33 34 35 36 1C 41  42 43 1D                 123456.ABC.
0000  31 32 33 34 35 36 1C 41  42 43 1D                 123456.ABC.</programlisting>
<itemizedlist>
<listitem>
<simpara>Create a variable length field F1 that can be a max of 20 wide terminated by a 0x1C.</simpara>
</listitem>
<listitem>
<simpara>Create a variable length field F2 that can be a max of 5 wide terminated by a 0x1D.</simpara>
</listitem>
<listitem>
<simpara>Add them to the Test1 container.</simpara>
</listitem>
<listitem>
<simpara>Use raw input to test unpacking.</simpara>
</listitem>
<listitem>
<simpara>Expect F1 to be 123456 and F2 to be ABC.</simpara>
</listitem>
<listitem>
<simpara>Create a new container Test2 to test packing of the same fields to get byte array. The packing process will add the delimiter, you dont set it.</simpara>
</listitem>
<listitem>
<simpara>Expect the packed array to be identical to the raw input used for unpacking.</simpara>
</listitem>
<listitem>
<simpara>See the hexdumps are identical for both the containers,operations show equivalence.</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_branchfieldpackager">
<title>BranchFieldPackager</title>
<simpara>Consider a specification where you need to parse fields differently based on a particular field. Typically you will see a pattern where, if the value of the field is X the fields following it are Y1,Y2..Yn.</simpara>
<simpara>As an example:
There is a field F1 which is fixed.
There is a fixed field F2 that can have values 01 or 02.
If the value is 01, 2 fields following it are Fixed 3 and Fixed 3.
If the value is 02, 2 fields following it are Fixed 4 and Fixed 4.
.BranchFieldPackager Usage</simpara>
<informalexample>
<literallayout class="monospaced">@Test
public void unpackTest06() throws ISOException{</literallayout>
<literallayout class="monospaced">AFSDFieldPackager f1 = new FixedFieldPackager("F1", 5, AsciiInterpreter.INSTANCE);
AFSDFieldPackager f2 = new FixedFieldPackager("F2", 2, AsciiInterpreter.INSTANCE);</literallayout>
<literallayout class="monospaced">FSDMsgX innerFSDCase01 = new FSDMsgX("inner-1");
AFSDFieldPackager f7 = new FixedFieldPackager("F7", 3, AsciiInterpreter.INSTANCE);
AFSDFieldPackager f6 = new FixedFieldPackager("F6", 3, AsciiInterpreter.INSTANCE);
innerFSDCase01.add("F7",f7);
innerFSDCase01.add("F6",f6);</literallayout>
<literallayout class="monospaced">FSDMsgX innerFSDCase02 = new FSDMsgX("inner-2");
AFSDFieldPackager f8 = new FixedFieldPackager("F8", 4, AsciiInterpreter.INSTANCE);
AFSDFieldPackager f9 = new FixedFieldPackager("F9", 4, AsciiInterpreter.INSTANCE);
innerFSDCase02.add("F8",f8);
innerFSDCase02.add("F9",f9);</literallayout>
<literallayout class="monospaced">Map&lt;String, AFSDFieldPackager&gt; caseMap = new HashMap&lt;String, AFSDFieldPackager&gt;();
caseMap.put("01", innerFSDCase01);
caseMap.put("02", innerFSDCase02);
AFSDFieldPackager f3 = new BranchFieldPackager("F3", "F2", caseMap, null);</literallayout>
<literallayout class="monospaced">FSDMsgX msg = new FSDMsgX("Test");
msg.add("F1", f1);
msg.add("F2", f2);
msg.add("F3", f3);</literallayout>
<literallayout class="monospaced">System.out.println(msg.getParserTree(""));</literallayout>
<literallayout class="monospaced">msg.unpack("ABCDE0244445555".getBytes());
System.out.println(msg.dump(""));
assertEquals("ABCDE", msg.get("F1"));
assertEquals("02", msg.get("F2"));</literallayout>
<literallayout class="monospaced">assertEquals("4444", msg.get("F8"));
assertEquals("5555", msg.get("F9"));</literallayout>
<literallayout class="monospaced">}</literallayout>
</informalexample>
<simpara><emphasis role="strong">Output</emphasis></simpara>
<programlisting language="xml" linenumbering="unnumbered"> [Test]
Field [F1] : Fixed [5]
Field [F2] : Fixed [2]
Field [F3] : [Branch]
	switch (F2)
		01:
			[inner-1]
			Field [F7] : Fixed [3]
			Field [F6] : Fixed [3]
		02:
			[inner-1]
			Field [F8] : Fixed [4]
			Field [F9] : Fixed [4]
		default:
			[Not Set]
&lt;fsdmsgX name="Test"&gt;
	&lt;field id="F1" value="ABCDE"/&gt;
	&lt;field id="F2" value="02"/&gt;
	&lt;fsdmsgX name="inner-1"&gt;
		&lt;field id="F8" value="4444"/&gt;
		&lt;field id="F9" value="5555"/&gt;
	&lt;/fsdmsgX&gt;
&lt;/fsdmsgX&gt;</programlisting>
<itemizedlist>
<listitem>
<simpara>Define Fixed F1.</simpara>
</listitem>
<listitem>
<simpara>Define Fixed F2.</simpara>
</listitem>
<listitem>
<simpara>Set up the individual case formatters for cases 01 and 02 based on value in F2 (inner-1 and inner-2)</simpara>
</listitem>
<listitem>
<simpara>Add the cases to a map where the key is the values F2 can hold and the maps value is the packager it should follow.</simpara>
</listitem>
<listitem>
<simpara>Set up the branchfield packager field F3. the constructor takes the existing fields name, the name of the field whose value we  will make the branching decision off [F2], the map that has the value to  packager map, the last one is the default packager to use if the value of F2 is not in the map, here we have chosen null as we dont want a default path.</simpara>
</listitem>
<listitem>
<simpara>Add the F1,F2 and F3 to the container. You dont add the other packagers as the those are basically used indirectly by F3. So once the container unpacks F1, then F2 and then when it unpacks F3, it will follow the packagers in container F3.</simpara>
</listitem>
<listitem>
<simpara>The output shows you the parsetree based on how you have setup your parser, you can see f1,F2 as fixed and the branch showing you the switch on F2 and the cases wit their packagers.</simpara>
</listitem>
<listitem>
<simpara>You can try tpo change the input stream and use ABCDE01222333 to see case 01 gets used.</simpara>
</listitem>
<listitem>
<simpara>When you do a pack, it will check to see what value is set in F2 and pick the packagers to follow accordingly.</simpara>
</listitem>
</itemizedlist>
</section>
</section>
</section>
</chapter>
</part>
<part xml:id="_jpos_ee_entities">
<title>jPOS-EE Entities</title>
<chapter xml:id="sysconfig">
<title>SysConfig</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="sysconfig.svg"/>
</imageobject>
<textobject><phrase>sysconfig</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The <literal>SysConfig</literal> entity <footnote><simpara><emphasis>sysconfig</emphasis> table</simpara></footnote> is a general purpose entity
used by jPOS-EE to store configuration parameters.</simpara>
<simpara>It contains the following properties:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>id</literal></simpara>
</listitem>
<listitem>
<simpara><literal>value</literal></simpara>
</listitem>
<listitem>
<simpara><literal>readPerm</literal></simpara>
</listitem>
<listitem>
<simpara><literal>writePerm</literal></simpara>
</listitem>
</itemizedlist>
<simpara><literal>readPerm</literal> and <literal>writePerm</literal> properties can be optionally used by
the user interface in order to limit access to specific entries.</simpara>
<simpara>Most jPOS applications typically use a prefix, for example:</simpara>
<screen linenumbering="unnumbered">              id       |               value
-----------------------+------------------------------------
 perm.sysadmin         | System Administrator
 perm.login            | Login
 perm.sysconfig.read   | View System Configuration
 perm.sysconfig.write  | Edit System Configuration
 perm.users.write      | Write permission on Users
 perm.users.read       | Read permission on Users
 perm.accounting       | Full access to accounting records</screen>
<simpara>When shown in the user interface, that <literal>perm.</literal> prefix is discarded, e.g.:</simpara>
<simpara><inlinemediaobject>
<imageobject>
<imagedata fileref="images/permissions.png" contentwidth="500px"/>
</imageobject>
<textobject><phrase>Permissions</phrase></textobject>
</inlinemediaobject></simpara>
<simpara>This prefix is configured in <literal>00_qi.xml</literal> like this:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;view route="permissions" class="org.jpos.qi.sysconfig.SysConfigView"
    perm="sysadmin" sidebar="system"&gt;
    &lt;property name="name" value="permissions"/&gt;
    &lt;property name="entityName" value="permission"/&gt;
    &lt;property name="prefix" value="perm." /&gt;                                       <co xml:id="CO29-1"/>
    &lt;property name="title" value="Permissions" /&gt;
    &lt;attribute name="id" read-only="true" required="true"/&gt;
    &lt;attribute name="value" regex="&amp;TEXT_PATTERN;" required="true"/&gt;
  &lt;/view&gt;</programlisting>
<calloutlist>
<callout arearefs="CO29-1">
<para>There goes the <literal>perm.</literal> prefix.</para>
</callout>
</calloutlist>
<simpara>Using this technique, it&#8217;s easy to create CRUD operations for different kind of
configuration groups (roles, permissions, hosts, cryptograms, etc.) just by copying
that little XML element snippet inside the application&#8217;s <literal>00_qi.xml</literal>.</simpara>
</chapter>
<chapter xml:id="_syslog">
<title>SysLog</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="syslog.svg"/>
</imageobject>
<textobject><phrase>syslog</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The <literal>SysLog</literal> entity is a general purpose entity used by jPOS-EE to record
an audit trail of relevant events.</simpara>
<simpara>The table has the following columns:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>id</literal> : auto-generated ID</simpara>
</listitem>
<listitem>
<simpara><literal>date</literal>: timestamp</simpara>
</listitem>
<listitem>
<simpara><literal>deleted</literal>: logical delete indicator</simpara>
</listitem>
<listitem>
<simpara><literal>source</literal>: application specific source (i.e. node name)</simpara>
</listitem>
<listitem>
<simpara><literal>severity</literal>: we use DEBUG = 0, TRACE = 1, INFO  = 2, WARN  = 3, ERROR = 4, CRITICAL=5</simpara>
</listitem>
<listitem>
<simpara><literal>summary</literal>: a brief description of the event, suitable to be printed by the UI in a column</simpara>
</listitem>
<listitem>
<simpara><literal>detail</literal>: specific info about the event</simpara>
</listitem>
<listitem>
<simpara><literal>trace</literal>: additional information (i.e. dumps)</simpara>
</listitem>
<listitem>
<simpara><literal>deleted</literal>: logical delete</simpara>
</listitem>
</itemizedlist>
<simpara>Here is a sample use:</simpara>
<screen linenumbering="unnumbered">  id  |          date           |  source   |  type  | severity |         summary
------+-------------------------+-----------+--------+----------+-------------------------
 1102 | 2018-10-15 21:02:31.544 | N01       | SYSTEM |        2 | Start
 1607 | 2018-10-15 21:02:43.028 | N01       | SYSTEM |        2 | Stop (uptime 11s)
 1608 | 2018-10-16 16:43:10.318 | N01       | SYSTEM |        2 | Start
 1609 | 2018-10-16 17:00:20.428 | N01       | SYSTEM |        2 | Stop (uptime 17m10s)
 1610 | 2018-10-16 17:00:31.798 | RESTAPI01 | SYSTEM |        2 | Start
 1613 | 2018-10-16 17:14:43.698 | RESTAPI01 | SYSTEM |        2 | Stop (uptime 14m13s)
 1614 | 2018-10-16 17:14:50.987 | N01       | SYSTEM |        2 | Start
 1618 | 2018-10-16 19:46:20.14  | N01       | SYSTEM |        2 | Stop (uptime 2h31m29s)</screen>
</chapter>
<chapter xml:id="_eeuser_module">
<title>EEUser module</title>
<simpara>The <literal>eeuser</literal> module can be used to represent visitors and users of the system with their
respective roles and permissions. Roles can be system-wide, or per-Resource (tenant).</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="eeuser-module.svg" width="90%"/>
</imageobject>
<textobject><phrase>eeuser module</phrase></textobject>
</mediaobject>
</informalfigure>
<section xml:id="_visitor">
<title>Visitor</title>
<simpara>For web-based applications, a <emphasis>visitor</emphasis> represents a remote user, either
anonymous or logged into the system. The <emphasis>Visitor</emphasis> entity allows implementing the optional
<emphasis>remember me</emphasis> feature. When its <emphasis>User</emphasis> is not null, that means the user
is already logged in. A Cookie is used to locate a given visitor.</simpara>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="visitor.svg"/>
</imageobject>
<textobject><phrase>visitor</phrase></textobject>
</mediaobject>
</informalfigure>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="15*"/>
<colspec colname="col_2" colwidth="85*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>id</simpara></entry>
<entry align="left" valign="top"><simpara>Application specific, QI uses a UUID string</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>user</simpara></entry>
<entry align="left" valign="top"><simpara>If the user is already logged into the system, points to a valid User (in <literal>eeuser</literal> table)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>lastUpdate</simpara></entry>
<entry align="left" valign="top"><simpara>timestamp with last session initiation</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>props</simpara></entry>
<entry align="left" valign="top"><simpara>application specific properties  (i.e. host/ip address)</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<itemizedlist>
<listitem>
<simpara>The visitor id format is application specific, QI uses a UUID string</simpara>
</listitem>
</itemizedlist>
</section>
<section xml:id="_user">
<title>User</title>
<simpara><emphasis>Users</emphasis>, in turn have <emphasis>roles</emphasis> containing <emphasis>permissions</emphasis>.</simpara>
<simpara>Roles can be limited to certain realms. Roles can have a parent, in which case, it inherits its permissions.</simpara>
<tip>
<simpara>Because <literal>user</literal> is usually a reserved word in SQL, we use the name <literal>eeuser</literal>
for the users table.</simpara>
</tip>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="user-entity.svg" width="90%"/>
</imageobject>
<textobject><phrase>user entity</phrase></textobject>
</mediaobject>
</informalfigure>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>id</simpara></entry>
<entry align="left" valign="top"><simpara>internal id</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>nick</simpara></entry>
<entry align="left" valign="top"><simpara>unique system-wide nick name</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>passwordHash</simpara></entry>
<entry align="left" valign="top"><simpara>current strategy (<literal>HashVersion.ONE</literal>) uses <literal>PBKDF2WithHmacSHA256</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>name</simpara></entry>
<entry align="left" valign="top"><simpara>the user name</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>email</simpara></entry>
<entry align="left" valign="top"><simpara>primary e-mail address - additional email addresses can be stored in the <literal>User.props</literal> map</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>roles</simpara></entry>
<entry align="left" valign="top"><simpara>user roles (which in turn have a permissions set)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>props</simpara></entry>
<entry align="left" valign="top"><simpara>a general purpose map used to store application-specific data associated with the user</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>deleted</simpara></entry>
<entry align="left" valign="top"><simpara>logical delete</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>active</simpara></entry>
<entry align="left" valign="top"><simpara>true if the user is active</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>verified</simpara></entry>
<entry align="left" valign="top"><simpara>true if user has been verified. The verification process is application specific</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>startDate</simpara></entry>
<entry align="left" valign="top"><simpara>if not null, user is not valid before this date</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>endDate</simpara></entry>
<entry align="left" valign="top"><simpara>if not null, user is not valid after this date</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>passwordHistory</simpara></entry>
<entry align="left" valign="top"><simpara>stores previous password hashes in order to implement password reuse feature</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>forcePasswordChange</simpara></entry>
<entry align="left" valign="top"><simpara>if true, QI forces the user to change his/her password</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>lastLogin</simpara></entry>
<entry align="left" valign="top"><simpara>QI updates this entry on every login</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>passwordChanged</simpara></entry>
<entry align="left" valign="top"><simpara>last password change, use to force users to change password after X time</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>loginAttempts</simpara></entry>
<entry align="left" valign="top"><simpara>invalid login counter, can be used to lock users (by setting <literal>active=false</literal>)</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<note>
<simpara>jPOS-EE support multiple password hash strategies.
The current one (<literal>VERSION.ONE</literal>) uses <literal>PBKDF2WithHmacSHA256</literal>.
Entries with an older version (ZERO) get automatically upgraded to version
ONE on the next login.</simpara>
</note>
</section>
<section xml:id="_roles_and_permissions">
<title>Roles and Permissions</title>
<simpara>Users have roles, which in turn have permissions.</simpara>
<simpara>Here is a sample <literal>role</literal> entry:</simpara>
<screen linenumbering="unnumbered"># select * from role where name='admin';

 id | name
----+-------
 64 | admin

# select * from role_perms where role=64;

 role |      name
------+-----------------
   64 | sysadmin
   64 | login
   64 | sysconfig.read
   64 | sysconfig.write
   64 | users.read
   64 | users.write
   64 | accounting</screen>
<simpara>The permission and role names are application specific. QI (the jPOS UI) uses
the <literal>sysconfig</literal> (see <link linkend="sysconfig">SysConfig schema</link>) table in order to assist
the UI with permission options, e.g.</simpara>
<screen linenumbering="unnumbered"># select * from sysconfig where id like 'perm%';
          id          |    readperm    |               value               | writeperm
----------------------+----------------+-----------------------------------+-----------
 perm.accounting      | sysconfig.read | Full access to accounting records | sysadmin
 perm.login           | sysconfig.read | Login                             | sysadmin
 perm.sysadmin        | sysadmin       | System Administrator              | sysadmin
 perm.sysconfig.read  | sysconfig.read | View System Configuration         | sysadmin
 perm.sysconfig.write | sysconfig.read | Edit System Configuration         | sysadmin
 perm.users.read      | sysconfig.read | Read permission on Users          | admin
 perm.users.write     | sysconfig.read | Write permission on Users         | admin</screen>
<simpara>As mentioned, the permission names are totally application specific. QI checks that a given user
has a role that in turn has the <literal>perm.login</literal> in order to allow access to the system. These permissions
can be configured in the <literal>00_qi.xml</literal> (see <link linkend="QI">QI module</link>)  file to allow access to different parts
of the system, e.g.:</simpara>
<programlisting language="xml" linenumbering="unnumbered">  &lt;view route="profile" class="org.jpos.qi.eeuser.ProfilesView"
    perm="login" sidebar="system"&gt;                                    <co xml:id="CO30-1"/>
    &lt;property name="entityName" value="user"/&gt;
    &lt;attribute name="id" field="false"/&gt;
    &lt;attribute name="nick" length="64" regex="&amp;WORD_PATTERN;"/&gt;
    &lt;attribute name="name" length="128" regex="&amp;TEXT_PATTERN;"/&gt;
    &lt;attribute name="email" length="128" /&gt;
    &lt;attribute name="active"/&gt;
    &lt;attribute name="roles" column="false" perm="sysadmin"/&gt;
  &lt;/view&gt;
  &lt;view route="roles" class="org.jpos.qi.eeuser.RolesView"
         perm="sysadmin" sidebar="system"&gt;                            <co xml:id="CO30-2"/>
    &lt;property name="entityName" value="role"/&gt;
    &lt;attribute name="id" field="false"/&gt;
    &lt;attribute name="name" regex="&amp;WORD_PATTERN;" length="64"/&gt;
    &lt;attribute name="permissions" column="false"/&gt;
  &lt;/view&gt;</programlisting>
<calloutlist>
<callout arearefs="CO30-1">
<para>user can access its own profile</para>
</callout>
<callout arearefs="CO30-2">
<para>but needs <literal>sysadmin</literal> permission in order to administer roles</para>
</callout>
</calloutlist>
</section>
<section xml:id="_roles_realm">
<title>Role&#8217;s realm</title>
<simpara>In multi-tenant systems, a user may have a role <literal>admin</literal> within a given realm
(e.g., a given <literal>Issuer</literal>) but not on others. A <literal>role</literal> can have an optional <literal>realm</literal>
to limit its scope.</simpara>
<simpara>The permissions granted to a role restricted to a given realm are automatically
prefixed with the realm&#8217;s name, for example, if a given role <literal>realm=accounting,
role=admin</literal> has the permissions <literal>read</literal> and <literal>post</literal>, the permissions granted to
the user are <literal>accounting:read</literal> and <literal>accounting:post</literal> instead of just <literal>read</literal> and
<literal>post</literal>.</simpara>
<simpara>As shown in the previous diagram, a Role has permissions, but it also has a
parent (that points to another Role).</simpara>
<simpara>If we have a generic <literal>accounting-admin</literal> role with permissions <emphasis>read</emphasis> and <emphasis>post</emphasis>,
we can have a realm-scoped <literal>accounting-admin</literal> role that don&#8217;t need to be
configured with said permissions.</simpara>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="5">
<colspec colname="col_1" colwidth="10*"/>
<colspec colname="col_2" colwidth="20*"/>
<colspec colname="col_3" colwidth="20*"/>
<colspec colname="col_4" colwidth="30*"/>
<colspec colname="col_5" colwidth="20*"/>
<thead>
<row>
<entry align="left" valign="top">Id</entry>
<entry align="left" valign="top">Realm</entry>
<entry align="left" valign="top">Role</entry>
<entry align="left" valign="top">Permissions</entry>
<entry align="left" valign="top">Parent</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>1</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>accounting-admin</simpara></entry>
<entry align="left" valign="top"><simpara>read, post</simpara></entry>
<entry align="left" valign="top"><simpara>(no parent)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>2</simpara></entry>
<entry align="left" valign="top"><simpara>company_1</simpara></entry>
<entry align="left" valign="top"><simpara>accounting-admin</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>3</simpara></entry>
<entry align="left" valign="top"><simpara>company_2</simpara></entry>
<entry align="left" valign="top"><simpara>accounting-admin</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>4</simpara></entry>
<entry align="left" valign="top"><simpara>company_3</simpara></entry>
<entry align="left" valign="top"><simpara>accounting-admin</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>5</simpara></entry>
<entry align="left" valign="top"><simpara>company_4</simpara></entry>
<entry align="left" valign="top"><simpara>accounting-admin</simpara></entry>
<entry align="left" valign="top"></entry>
<entry align="left" valign="top"><simpara>1</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>A user that has Role 1 (<literal>accounting-admin</literal> with no realm restriction) will have
the generic permissions:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>read</literal> and</simpara>
</listitem>
<listitem>
<simpara><literal>post</literal></simpara>
</listitem>
</itemizedlist>
<simpara>A user that has Role 2 (<literal>company_1</literal>) and 4 (<literal>company_3</literal>) will have the permissions:</simpara>
<itemizedlist>
<listitem>
<simpara><literal>company_1:read</literal></simpara>
</listitem>
<listitem>
<simpara><literal>company_1:post</literal></simpara>
</listitem>
<listitem>
<simpara><literal>company_3:read</literal></simpara>
</listitem>
<listitem>
<simpara><literal>company_3:post</literal></simpara>
</listitem>
</itemizedlist>
<note>
<simpara>The permission is formed out of the realm name, plus a colon and the real permission name.</simpara>
</note>
</section>
<section xml:id="_consumer">
<title>Consumer</title>
<simpara>A <emphasis>Consumer</emphasis> is used to represent an API client (i.e. a mobile device). If the
API is being hit by a mobile application, the Consumer would represent an instance of
that application.</simpara>
<simpara>A Consumer belongs to a user, but it has its own set of roles and permissions.</simpara>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="20*"/>
<colspec colname="col_2" colwidth="80*"/>
<thead>
<row>
<entry align="left" valign="top">Property</entry>
<entry align="left" valign="top">Description</entry>
</row>
</thead>
<tbody>
<row>
<entry align="left" valign="top"><simpara>id</simpara></entry>
<entry align="left" valign="top"><simpara>application-specific ID (i.e. UUID)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>hash</simpara></entry>
<entry align="left" valign="top"><simpara>current strategy (<literal>HashVersion.ONE</literal>) uses <literal>PBKDF2WithHmacSHA256</literal></simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>active</simpara></entry>
<entry align="left" valign="top"><simpara>true if the user is active</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>deleted</simpara></entry>
<entry align="left" valign="top"><simpara>logical delete</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>startDate</simpara></entry>
<entry align="left" valign="top"><simpara>if not null, user is not valid before this date</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>endDate</simpara></entry>
<entry align="left" valign="top"><simpara>if not null, user is not valid after this date</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>user</simpara></entry>
<entry align="left" valign="top"><simpara>Consumers belong to a given user</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>roles</simpara></entry>
<entry align="left" valign="top"><simpara>set of roles (which in turn has permissions)</simpara></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>props</simpara></entry>
<entry align="left" valign="top"><simpara>application-specific properties</simpara></entry>
</row>
</tbody>
</tgroup>
</informaltable>
</section>
<section xml:id="_password_history">
<title>Password History</title>
<simpara>In order to support the optional <emphasis>do not repeat passwords</emphasis> feature, we have a
companion password history entity where the UI keeps track of the password
hashes of the last N passwords used.</simpara>
</section>
<section xml:id="_userconsumer_properties">
<title>User/Consumer properties</title>
<simpara>Application-specific data associated with the user can be stored in this
general purpose key/value map. Typical information stored there are
alternate email addresses, UI preferences, etc.</simpara>
</section>
</chapter>
<chapter xml:id="seqno">
<title>SeqNo</title>
<informalfigure>
<mediaobject>
<imageobject>
<imagedata fileref="seqno.svg"/>
</imageobject>
<textobject><phrase>seqno</phrase></textobject>
</mediaobject>
</informalfigure>
<simpara>The <literal>SeqNo</literal> entity <footnote><simpara><emphasis>seqno</emphasis> table</simpara></footnote> is a general purpose entity
used by jPOS-EE to store application specific sequencers.</simpara>
<simpara>Typical use case would be terminal-level STANS, Voucher IDs and the like.</simpara>
<simpara>The <literal>SeqNoManager</literal> supports two operating modes:</simpara>
<itemizedlist>
<listitem>
<simpara>Synchronous</simpara>
</listitem>
<listitem>
<simpara>Asynchronous</simpara>
</listitem>
</itemizedlist>
<simpara>In Synchronous mode, the transaction life-cycle is handled by the caller, e.g.:</simpara>
<programlisting language="java" linenumbering="unnumbered">    private long next(String id) {
        try (DB db = new DB()) {
            SeqNoManager mgr = new SeqNoManager(db);
            db.open();
            db.beginTransaction();
            long l = mgr.next(id, 999999L);
            db.commit();
            return l;
        }
    }</programlisting>
<note>
<simpara>In <emphasis>sync</emphasis> mode, a second thread trying to obtain a sequence number will block until the
former is committed.</simpara>
</note>
<simpara>In Asynchronous mode, the JDBC connection is released and an explicit call to <literal>SeqNoManager.release</literal>
has to be issued, e.g.:</simpara>
<programlisting language="java" linenumbering="unnumbered">   SeqNoManager mgr = new SeqNoManager(new DB());
   long l = mgr.next("sync", id, 60000L, 60000L, 999999L);
   // ... do something, e.g.: query remote host
   mgr.release("sync", id);
   return l;</programlisting>
<simpara>Interesting thing about async mode, is that while one calls a remote host (i.e. using <literal>QueryHost</literal>),
the JDBC connection gets released back to its pool.</simpara>
</chapter>
</part>
<part xml:id="_appendices">
<title>Appendices</title>
<appendix xml:id="appendix_copyright">
<title>Copyright</title>
<simpara>Copyright &#169; 2000-2015 Alejandro P. Revilla</simpara>
<simpara>This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as
published by the Free Software Foundation, either version 3 of the
License, or (at your option) any later version.</simpara>
<simpara>This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License for more details.</simpara>
<simpara>You should have received a copy of the GNU Affero General Public
License along with this program.  If not, see <link xl:href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</link>.</simpara>
</appendix>
<appendix xml:id="appendix_license">
<title>License</title>
<informalexample role="license">
<simpara><emphasis role="strong">GNU AFFERO GENERAL PUBLIC LICENSE</emphasis></simpara>
<simpara>Version 3, 19 November 2007</simpara>
<simpara>Copyright &#169; 2007 Free Software Foundation, Inc.
&lt;<link xl:href="http://fsf.org/">http://fsf.org/</link>&gt; <?asciidoc-br?>
 Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.</simpara>
<simpara><emphasis role="strong">Preamble</emphasis></simpara>
<simpara>The GNU Affero General Public License is a free, copyleft license for
software and other kinds of works, specifically designed to ensure
cooperation with the community in the case of network server software.</simpara>
<simpara>The licenses for most software and other practical works are designed to
take away your freedom to share and change the works. By contrast, our
General Public Licenses are intended to guarantee your freedom to share
and change all versions of a program&#8212;&#8203;to make sure it remains free
software for all its users.</simpara>
<simpara>When we speak of free software, we are referring to freedom, not price.
Our General Public Licenses are designed to make sure that you have the
freedom to distribute copies of free software (and charge for them if
you wish), that you receive source code or can get it if you want it,
that you can change the software or use pieces of it in new free
programs, and that you know you can do these things.</simpara>
<simpara>Developers that use our General Public Licenses protect your rights with
two steps: (1) assert copyright on the software, and (2) offer you this
License which gives you legal permission to copy, distribute and/or
modify the software.</simpara>
<simpara>A secondary benefit of defending all users' freedom is that improvements
made in alternate versions of the program, if they receive widespread
use, become available for other developers to incorporate. Many
developers of free software are heartened and encouraged by the
resulting cooperation. However, in the case of software used on network
servers, this result may fail to come about. The GNU General Public
License permits making a modified version and letting the public access
it on a server without ever releasing its source code to the public.</simpara>
<simpara>The GNU Affero General Public License is designed specifically to ensure
that, in such cases, the modified source code becomes available to the
community. It requires the operator of a network server to provide the
source code of the modified version running there to the users of that
server. Therefore, public use of a modified version, on a publicly
accessible server, gives the public access to the source code of the
modified version.</simpara>
<simpara>An older license, called the Affero General Public License and published
by Affero, was designed to accomplish similar goals. This is a different
license, not a version of the Affero GPL, but Affero has released a new
version of the Affero GPL which permits relicensing under this license.</simpara>
<simpara>The precise terms and conditions for copying, distribution and
modification follow.</simpara>
<simpara><emphasis role="strong">TERMS AND CONDITIONS</emphasis></simpara>
<simpara><emphasis role="strong">0. Definitions.</emphasis></simpara>
<simpara>"This License" refers to version 3 of the GNU Affero General Public
License.</simpara>
<simpara>"Copyright" also means copyright-like laws that apply to other kinds of
works, such as semiconductor masks.</simpara>
<simpara>"The Program" refers to any copyrightable work licensed under this
License. Each licensee is addressed as "you". "Licensees" and
"recipients" may be individuals or organizations.</simpara>
<simpara>To "modify" a work means to copy from or adapt all or part of the work
in a fashion requiring copyright permission, other than the making of an
exact copy. The resulting work is called a "modified version" of the
earlier work or a work "based on" the earlier work.</simpara>
<simpara>A "covered work" means either the unmodified Program or a work based on
the Program.</simpara>
<simpara>To "propagate" a work means to do anything with it that, without
permission, would make you directly or secondarily liable for
infringement under applicable copyright law, except executing it on a
computer or modifying a private copy. Propagation includes copying,
distribution (with or without modification), making available to the
public, and in some countries other activities as well.</simpara>
<simpara>To "convey" a work means any kind of propagation that enables other
parties to make or receive copies. Mere interaction with a user through
a computer network, with no transfer of a copy, is not conveying.</simpara>
<simpara>An interactive user interface displays "Appropriate Legal Notices" to
the extent that it includes a convenient and prominently visible feature
that (1) displays an appropriate copyright notice, and (2) tells the
user that there is no warranty for the work (except to the extent that
warranties are provided), that licensees may convey the work under this
License, and how to view a copy of this License. If the interface
presents a list of user commands or options, such as a menu, a prominent
item in the list meets this criterion.</simpara>
<simpara><emphasis role="strong">1. Source Code.</emphasis></simpara>
<simpara>The "source code" for a work means the preferred form of the work for
making modifications to it. "Object code" means any non-source form of a
work.</simpara>
<simpara>A "Standard Interface" means an interface that either is an official
standard defined by a recognized standards body, or, in the case of
interfaces specified for a particular programming language, one that is
widely used among developers working in that language.</simpara>
<simpara>The "System Libraries" of an executable work include anything, other
than the work as a whole, that (a) is included in the normal form of
packaging a Major Component, but which is not part of that Major
Component, and (b) serves only to enable use of the work with that Major
Component, or to implement a Standard Interface for which an
implementation is available to the public in source code form. A "Major
Component", in this context, means a major essential component (kernel,
window system, and so on) of the specific operating system (if any) on
which the executable work runs, or a compiler used to produce the work,
or an object code interpreter used to run it.</simpara>
<simpara>The "Corresponding Source" for a work in object code form means all the
source code needed to generate, install, and (for an executable work)
run the object code and to modify the work, including scripts to control
those activities. However, it does not include the work&#8217;s System
Libraries, or general-purpose tools or generally available free programs
which are used unmodified in performing those activities but which are
not part of the work. For example, Corresponding Source includes
interface definition files associated with source files for the work,
and the source code for shared libraries and dynamically linked
subprograms that the work is specifically designed to require, such as
by intimate data communication or control flow between those subprograms
and other parts of the work.</simpara>
<simpara>The Corresponding Source need not include anything that users can
regenerate automatically from other parts of the Corresponding Source.</simpara>
<simpara>The Corresponding Source for a work in source code form is that same
work.</simpara>
<simpara><emphasis role="strong">2. Basic Permissions.</emphasis></simpara>
<simpara>All rights granted under this License are granted for the term of
copyright on the Program, and are irrevocable provided the stated
conditions are met. This License explicitly affirms your unlimited
permission to run the unmodified Program. The output from running a
covered work is covered by this License only if the output, given its
content, constitutes a covered work. This License acknowledges your
rights of fair use or other equivalent, as provided by copyright law.</simpara>
<simpara>You may make, run and propagate covered works that you do not convey,
without conditions so long as your license otherwise remains in force.
You may convey covered works to others for the sole purpose of having
them make modifications exclusively for you, or provide you with
facilities for running those works, provided that you comply with the
terms of this License in conveying all material for which you do not
control copyright. Those thus making or running the covered works for
you must do so exclusively on your behalf, under your direction and
control, on terms that prohibit them from making any copies of your
copyrighted material outside their relationship with you.</simpara>
<simpara>Conveying under any other circumstances is permitted solely under the
conditions stated below. Sublicensing is not allowed; section 10 makes
it unnecessary.</simpara>
<simpara><emphasis role="strong">3. Protecting Users' Legal Rights From Anti-Circumvention Law.</emphasis></simpara>
<simpara>No covered work shall be deemed part of an effective technological
measure under any applicable law fulfilling obligations under article 11
of the WIPO copyright treaty adopted on 20 December 1996, or similar
laws prohibiting or restricting circumvention of such measures.</simpara>
<simpara>When you convey a covered work, you waive any legal power to forbid
circumvention of technological measures to the extent such circumvention
is effected by exercising rights under this License with respect to the
covered work, and you disclaim any intention to limit operation or
modification of the work as a means of enforcing, against the work&#8217;s
users, your or third parties' legal rights to forbid circumvention of
technological measures.</simpara>
<simpara><emphasis role="strong">4. Conveying Verbatim Copies.</emphasis></simpara>
<simpara>You may convey verbatim copies of the Program&#8217;s source code as you
receive it, in any medium, provided that you conspicuously and
appropriately publish on each copy an appropriate copyright notice; keep
intact all notices stating that this License and any non-permissive
terms added in accord with section 7 apply to the code; keep intact all
notices of the absence of any warranty; and give all recipients a copy
of this License along with the Program.</simpara>
<simpara>You may charge any price or no price for each copy that you convey, and
you may offer support or warranty protection for a fee.</simpara>
<simpara><emphasis role="strong">5. Conveying Modified Source Versions.</emphasis></simpara>
<simpara>You may convey a work based on the Program, or the modifications to
produce it from the Program, in the form of source code under the terms
of section 4, provided that you also meet all of these conditions:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>The work must carry prominent notices stating that you modified it,
and giving a relevant date.</simpara>
</listitem>
<listitem>
<simpara>The work must carry prominent notices stating that it is released
under this License and any conditions added under section 7. This
requirement modifies the requirement in section 4 to "keep intact all
notices".</simpara>
</listitem>
<listitem>
<simpara>You must license the entire work, as a whole, under this License to
anyone who comes into possession of a copy. This License will therefore
apply, along with any applicable section 7 additional terms, to the
whole of the work, and all its parts, regardless of how they are
packaged. This License gives no permission to license the work in any
other way, but it does not invalidate such permission if you have
separately received it.</simpara>
</listitem>
<listitem>
<simpara>If the work has interactive user interfaces, each must display
Appropriate Legal Notices; however, if the Program has interactive
interfaces that do not display Appropriate Legal Notices, your work need
not make them do so.</simpara>
</listitem>
</orderedlist>
<simpara>A compilation of a covered work with other separate and independent
works, which are not by their nature extensions of the covered work, and
which are not combined with it such as to form a larger program, in or
on a volume of a storage or distribution medium, is called an
"aggregate" if the compilation and its resulting copyright are not used
to limit the access or legal rights of the compilation&#8217;s users beyond
what the individual works permit. Inclusion of a covered work in an
aggregate does not cause this License to apply to the other parts of the
aggregate.</simpara>
<simpara><emphasis role="strong">6. Conveying Non-Source Forms.</emphasis></simpara>
<simpara>You may convey a covered work in object code form under the terms of
sections 4 and 5, provided that you also convey the machine-readable
Corresponding Source under the terms of this License, in one of these
ways:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by the
Corresponding Source fixed on a durable physical medium customarily used
for software interchange.</simpara>
</listitem>
<listitem>
<simpara>Convey the object code in, or embodied in, a physical product
(including a physical distribution medium), accompanied by a written
offer, valid for at least three years and valid for as long as you offer
spare parts or customer support for that product model, to give anyone
who possesses the object code either (1) a copy of the Corresponding
Source for all the software in the product that is covered by this
License, on a durable physical medium customarily used for software
interchange, for a price no more than your reasonable cost of physically
performing this conveying of source, or (2) access to copy the
Corresponding Source from a network server at no charge.</simpara>
</listitem>
<listitem>
<simpara>Convey individual copies of the object code with a copy of the
written offer to provide the Corresponding Source. This alternative is
allowed only occasionally and noncommercially, and only if you received
the object code with such an offer, in accord with subsection 6b.</simpara>
</listitem>
<listitem>
<simpara>Convey the object code by offering access from a designated place
(gratis or for a charge), and offer equivalent access to the
Corresponding Source in the same way through the same place at no
further charge. You need not require recipients to copy the
Corresponding Source along with the object code. If the place to copy
the object code is a network server, the Corresponding Source may be on
a different server (operated by you or a third party) that supports
equivalent copying facilities, provided you maintain clear directions
next to the object code saying where to find the Corresponding Source.
Regardless of what server hosts the Corresponding Source, you remain
obligated to ensure that it is available for as long as needed to
satisfy these requirements.</simpara>
</listitem>
<listitem>
<simpara>Convey the object code using peer-to-peer transmission, provided
you inform other peers where the object code and Corresponding Source of
the work are being offered to the general public at no charge under
subsection 6d.</simpara>
</listitem>
</orderedlist>
<simpara>A separable portion of the object code, whose source code is excluded
from the Corresponding Source as a System Library, need not be included
in conveying the object code work.</simpara>
<simpara>A "User Product" is either (1) a "consumer product", which means any
tangible personal property which is normally used for personal, family,
or household purposes, or (2) anything designed or sold for
incorporation into a dwelling. In determining whether a product is a
consumer product, doubtful cases shall be resolved in favor of coverage.
For a particular product received by a particular user, "normally used"
refers to a typical or common use of that class of product, regardless
of the status of the particular user or of the way in which the
particular user actually uses, or expects or is expected to use, the
product. A product is a consumer product regardless of whether the
product has substantial commercial, industrial or non-consumer uses,
unless such uses represent the only significant mode of use of the
product.</simpara>
<simpara>"Installation Information" for a User Product means any methods,
procedures, authorization keys, or other information required to install
and execute modified versions of a covered work in that User Product
from a modified version of its Corresponding Source. The information
must suffice to ensure that the continued functioning of the modified
object code is in no case prevented or interfered with solely because
modification has been made.</simpara>
<simpara>If you convey an object code work under this section in, or with, or
specifically for use in, a User Product, and the conveying occurs as
part of a transaction in which the right of possession and use of the
User Product is transferred to the recipient in perpetuity or for a
fixed term (regardless of how the transaction is characterized), the
Corresponding Source conveyed under this section must be accompanied by
the Installation Information. But this requirement does not apply if
neither you nor any third party retains the ability to install modified
object code on the User Product (for example, the work has been
installed in ROM).</simpara>
<simpara>The requirement to provide Installation Information does not include a
requirement to continue to provide support service, warranty, or updates
for a work that has been modified or installed by the recipient, or for
the User Product in which it has been modified or installed. Access to a
network may be denied when the modification itself materially and
adversely affects the operation of the network or violates the rules and
protocols for communication across the network.</simpara>
<simpara>Corresponding Source conveyed, and Installation Information provided, in
accord with this section must be in a format that is publicly documented
(and with an implementation available to the public in source code
form), and must require no special password or key for unpacking,
reading or copying.</simpara>
<simpara><emphasis role="strong">7. Additional Terms.</emphasis></simpara>
<simpara>"Additional permissions" are terms that supplement the terms of this
License by making exceptions from one or more of its conditions.
Additional permissions that are applicable to the entire Program shall
be treated as though they were included in this License, to the extent
that they are valid under applicable law. If additional permissions
apply only to part of the Program, that part may be used separately
under those permissions, but the entire Program remains governed by this
License without regard to the additional permissions.</simpara>
<simpara>When you convey a copy of a covered work, you may at your option remove
any additional permissions from that copy, or from any part of it.
(Additional permissions may be written to require their own removal in
certain cases when you modify the work.) You may place additional
permissions on material, added by you to a covered work, for which you
have or can give appropriate copyright permission.</simpara>
<simpara>Notwithstanding any other provision of this License, for material you
add to a covered work, you may (if authorized by the copyright holders
of that material) supplement the terms of this License with terms:</simpara>
<orderedlist numeration="loweralpha">
<listitem>
<simpara>Disclaiming warranty or limiting liability differently from the
terms of sections 15 and 16 of this License; or</simpara>
</listitem>
<listitem>
<simpara>Requiring preservation of specified reasonable legal notices or
author attributions in that material or in the Appropriate Legal Notices
displayed by works containing it; or</simpara>
</listitem>
<listitem>
<simpara>Prohibiting misrepresentation of the origin of that material, or
requiring that modified versions of such material be marked in
reasonable ways as different from the original version; or</simpara>
</listitem>
<listitem>
<simpara>Limiting the use for publicity purposes of names of licensors or
authors of the material; or</simpara>
</listitem>
<listitem>
<simpara>Declining to grant rights under trademark law for use of some trade
names, trademarks, or service marks; or</simpara>
</listitem>
<listitem>
<simpara>Requiring indemnification of licensors and authors of that material
by anyone who conveys the material (or modified versions of it) with
contractual assumptions of liability to the recipient, for any liability
that these contractual assumptions directly impose on those licensors
and authors.</simpara>
</listitem>
</orderedlist>
<simpara>All other non-permissive additional terms are considered "further
restrictions" within the meaning of section 10. If the Program as you
received it, or any part of it, contains a notice stating that it is
governed by this License along with a term that is a further
restriction, you may remove that term. If a license document contains a
further restriction but permits relicensing or conveying under this
License, you may add to a covered work material governed by the terms of
that license document, provided that the further restriction does not
survive such relicensing or conveying.</simpara>
<simpara>If you add terms to a covered work in accord with this section, you must
place, in the relevant source files, a statement of the additional terms
that apply to those files, or a notice indicating where to find the
applicable terms.</simpara>
<simpara>Additional terms, permissive or non-permissive, may be stated in the
form of a separately written license, or stated as exceptions; the above
requirements apply either way.</simpara>
<simpara><emphasis role="strong">8. Termination.</emphasis></simpara>
<simpara>You may not propagate or modify a covered work except as expressly
provided under this License. Any attempt otherwise to propagate or
modify it is void, and will automatically terminate your rights under
this License (including any patent licenses granted under the third
paragraph of section 11).</simpara>
<simpara>However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally terminates
your license, and (b) permanently, if the copyright holder fails to
notify you of the violation by some reasonable means prior to 60 days
after the cessation.</simpara>
<simpara>Moreover, your license from a particular copyright holder is reinstated
permanently if the copyright holder notifies you of the violation by
some reasonable means, this is the first time you have received notice
of violation of this License (for any work) from that copyright holder,
and you cure the violation prior to 30 days after your receipt of the
notice.</simpara>
<simpara>Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License. If your rights have been terminated and not permanently
reinstated, you do not qualify to receive new licenses for the same
material under section 10.</simpara>
<simpara><emphasis role="strong">9. Acceptance Not Required for Having Copies.</emphasis></simpara>
<simpara>You are not required to accept this License in order to receive or run a
copy of the Program. Ancillary propagation of a covered work occurring
solely as a consequence of using peer-to-peer transmission to receive a
copy likewise does not require acceptance. However, nothing other than
this License grants you permission to propagate or modify any covered
work. These actions infringe copyright if you do not accept this
License. Therefore, by modifying or propagating a covered work, you
indicate your acceptance of this License to do so.</simpara>
<simpara><emphasis role="strong">10. Automatic Licensing of Downstream Recipients.</emphasis></simpara>
<simpara>Each time you convey a covered work, the recipient automatically
receives a license from the original licensors, to run, modify and
propagate that work, subject to this License. You are not responsible
for enforcing compliance by third parties with this License.</simpara>
<simpara>An "entity transaction" is a transaction transferring control of an
organization, or substantially all assets of one, or subdividing an
organization, or merging organizations. If propagation of a covered work
results from an entity transaction, each party to that transaction who
receives a copy of the work also receives whatever licenses to the work
the party&#8217;s predecessor in interest had or could give under the previous
paragraph, plus a right to possession of the Corresponding Source of the
work from the predecessor in interest, if the predecessor has it or can
get it with reasonable efforts.</simpara>
<simpara>You may not impose any further restrictions on the exercise of the
rights granted or affirmed under this License. For example, you may not
impose a license fee, royalty, or other charge for exercise of rights
granted under this License, and you may not initiate litigation
(including a cross-claim or counterclaim in a lawsuit) alleging that any
patent claim is infringed by making, using, selling, offering for sale,
or importing the Program or any portion of it.</simpara>
<simpara><emphasis role="strong">11. Patents.</emphasis></simpara>
<simpara>A "contributor" is a copyright holder who authorizes use under this
License of the Program or a work on which the Program is based. The work
thus licensed is called the contributor&#8217;s "contributor version".</simpara>
<simpara>A contributor&#8217;s "essential patent claims" are all patent claims owned or
controlled by the contributor, whether already acquired or hereafter
acquired, that would be infringed by some manner, permitted by this
License, of making, using, or selling its contributor version, but do
not include claims that would be infringed only as a consequence of
further modification of the contributor version. For purposes of this
definition, "control" includes the right to grant patent sublicenses in
a manner consistent with the requirements of this License.</simpara>
<simpara>Each contributor grants you a non-exclusive, worldwide, royalty-free
patent license under the contributor&#8217;s essential patent claims, to make,
use, sell, offer for sale, import and otherwise run, modify and
propagate the contents of its contributor version.</simpara>
<simpara>In the following three paragraphs, a "patent license" is any express
agreement or commitment, however denominated, not to enforce a patent
(such as an express permission to practice a patent or covenant not to
sue for patent infringement). To "grant" such a patent license to a
party means to make such an agreement or commitment not to enforce a
patent against the party.</simpara>
<simpara>If you convey a covered work, knowingly relying on a patent license, and
the Corresponding Source of the work is not available for anyone to
copy, free of charge and under the terms of this License, through a
publicly available network server or other readily accessible means,
then you must either (1) cause the Corresponding Source to be so
available, or (2) arrange to deprive yourself of the benefit of the
patent license for this particular work, or (3) arrange, in a manner
consistent with the requirements of this License, to extend the patent
license to downstream recipients. "Knowingly relying" means you have
actual knowledge that, but for the patent license, your conveying the
covered work in a country, or your recipient&#8217;s use of the covered work
in a country, would infringe one or more identifiable patents in that
country that you have reason to believe are valid.</simpara>
<simpara>If, pursuant to or in connection with a single transaction or
arrangement, you convey, or propagate by procuring conveyance of, a
covered work, and grant a patent license to some of the parties
receiving the covered work authorizing them to use, propagate, modify or
convey a specific copy of the covered work, then the patent license you
grant is automatically extended to all recipients of the covered work
and works based on it.</simpara>
<simpara>A patent license is "discriminatory" if it does not include within the
scope of its coverage, prohibits the exercise of, or is conditioned on
the non-exercise of one or more of the rights that are specifically
granted under this License. You may not convey a covered work if you are
a party to an arrangement with a third party that is in the business of
distributing software, under which you make payment to the third party
based on the extent of your activity of conveying the work, and under
which the third party grants, to any of the parties who would receive
the covered work from you, a discriminatory patent license (a) in
connection with copies of the covered work conveyed by you (or copies
made from those copies), or (b) primarily for and in connection with
specific products or compilations that contain the covered work, unless
you entered into that arrangement, or that patent license was granted,
prior to 28 March 2007.</simpara>
<simpara>Nothing in this License shall be construed as excluding or limiting any
implied license or other defenses to infringement that may otherwise be
available to you under applicable patent law.</simpara>
<simpara><emphasis role="strong">12. No Surrender of Others' Freedom.</emphasis></simpara>
<simpara>If conditions are imposed on you (whether by court order, agreement or
otherwise) that contradict the conditions of this License, they do not
excuse you from the conditions of this License. If you cannot convey a
covered work so as to satisfy simultaneously your obligations under this
License and any other pertinent obligations, then as a consequence you
may not convey it at all. For example, if you agree to terms that
obligate you to collect a royalty for further conveying from those to
whom you convey the Program, the only way you could satisfy both those
terms and this License would be to refrain entirely from conveying the
Program.</simpara>
<simpara><emphasis role="strong">13. Remote Network Interaction; Use with the GNU General Public License.</emphasis></simpara>
<simpara>Notwithstanding any other provision of this License, if you modify the
Program, your modified version must prominently offer all users
interacting with it remotely through a computer network (if your version
supports such interaction) an opportunity to receive the Corresponding
Source of your version by providing access to the Corresponding Source
from a network server at no charge, through some standard or customary
means of facilitating copying of software. This Corresponding Source
shall include the Corresponding Source for any work covered by version 3
of the GNU General Public License that is incorporated pursuant to the
following paragraph.</simpara>
<simpara>Notwithstanding any other provision of this License, you have permission
to link or combine any covered work with a work licensed under version 3
of the GNU General Public License into a single combined work, and to
convey the resulting work. The terms of this License will continue to
apply to the part which is the covered work, but the work with which it
is combined will remain governed by version 3 of the GNU General Public
License.</simpara>
<simpara><emphasis role="strong">14. Revised Versions of this License.</emphasis></simpara>
<simpara>The Free Software Foundation may publish revised and/or new versions of
the GNU Affero General Public License from time to time. Such new
versions will be similar in spirit to the present version, but may
differ in detail to address new problems or concerns.</simpara>
<simpara>Each version is given a distinguishing version number. If the Program
specifies that a certain numbered version of the GNU Affero General
Public License "or any later version" applies to it, you have the option
of following the terms and conditions either of that numbered version or
of any later version published by the Free Software Foundation. If the
Program does not specify a version number of the GNU Affero General
Public License, you may choose any version ever published by the Free
Software Foundation.</simpara>
<simpara>If the Program specifies that a proxy can decide which future versions
of the GNU Affero General Public License can be used, that proxy&#8217;s
public statement of acceptance of a version permanently authorizes you
to choose that version for the Program.</simpara>
<simpara>Later license versions may give you additional or different permissions.
However, no additional obligations are imposed on any author or
copyright holder as a result of your choosing to follow a later version.</simpara>
<simpara><emphasis role="strong">15. Disclaimer of Warranty.</emphasis></simpara>
<simpara>THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT
WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF
THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME
THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</simpara>
<simpara><emphasis role="strong">16. Limitation of Liability.</emphasis></simpara>
<simpara>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR
CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES
ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT
NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES
SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE
WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN
ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</simpara>
<simpara><emphasis role="strong">17. Interpretation of Sections 15 and 16.</emphasis></simpara>
<simpara>If the disclaimer of warranty and limitation of liability provided above
cannot be given local legal effect according to their terms, reviewing
courts shall apply local law that most closely approximates an absolute
waiver of all civil liability in connection with the Program, unless a
warranty or assumption of liability accompanies a copy of the Program in
return for a fee.</simpara>
<simpara>END OF TERMS AND CONDITIONS</simpara>
<simpara><emphasis role="strong">How to Apply These Terms to Your New Programs</emphasis></simpara>
<simpara>If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.</simpara>
<simpara>To do so, attach the following notices to the program. It is safest to
attach them to the start of each source file to most effectively state
the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.</simpara>
<screen>    &lt;one line to give the program's name and a brief idea of what it does.&gt;
    Copyright (C) &lt;year&gt;  &lt;name of author&gt;

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</screen>
<simpara>Also add information on how to contact you by electronic and paper mail.</simpara>
<simpara>If your software can interact with users remotely through a computer
network, you should also make sure that it provides a way for users to
get its source. For example, if your program is a web application, its
interface could display a "Source" link that leads users to an archive
of the code. There are many ways you could offer source, and different
solutions will be better for different programs; see section 13 for the
specific requirements.</simpara>
<simpara>You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary. For more information on this, and how to apply and follow the
GNU AGPL, see
&lt;<link xl:href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</link>&gt;.</simpara>
</informalexample>
</appendix>
<appendix xml:id="appendix_CLA">
<title>Contributor License Agreement</title>
<informalexample role="license">
<simpara>jPOS Project
Contributor License Agreement V1.0
based on <link xl:href="http://www.apache.org/licenses/">http://www.apache.org/licenses/</link></simpara>
<simpara>Thank you for your interest in the jPOS project by Alejandro P. Revilla
(Uruguayan company #212 752 380 016) conducting business as the jPOS Organization
(jPOS.org).</simpara>
<simpara>In order to clarify the intellectual property license granted with
Contributions from any person or entity, jPOS.org must have a Contributor
License Agreement ("CLA") that has been signed by each Contributor, indicating
agreement to the license terms below.</simpara>
<simpara>This license is for your protection as a
Contributor as well as the protection of jPOS.org and its users; it does not
change your rights to use your own Contributions for any other purpose.</simpara>
<simpara>If you have not already done so, please complete this agreement and
commit it to the jPOS repository at
<link xl:href="https://github.com/jpos/jPOS">https://github.com/jpos/jPOS</link> at legal/cla-USERNAME.txt using
your authenticated SourceForge login. If you do not have commit
privilege to the repository, please email the file to <link xl:href="mailto:license@jpos.org">license@jpos.org</link>.
If possible, digitally sign the committed file, otherwise also send a
signed Agreement to jPOS.org.</simpara>
<simpara>Please read this document carefully before signing and keep a copy for
your records.</simpara>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Full Name</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>E-Mail</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Mailing Address:</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>You accept and agree to the following terms and conditions for Your
present and future Contributions submitted to jPOS.org. In return,
jPOS.org shall not use Your Contributions in a way that is
contrary to the software license in effect at the time of the
Contribution.  Except for the license granted herein to jPOS.org
and recipients of software distributed by jPOS.org, You reserve
all right, title, and interest in and to Your Contributions.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">Definitions.</emphasis> "You" (or "Your") shall mean the copyright owner or
legal entity authorized by the copyright owner that is making this
Agreement with jPOS.org. For legal entities, the entity making a
Contribution and all other entities that control, are controlled
by, or are under common control with that entity are considered to
be a single Contributor. For the purposes of this definition,
"control" means (i) the power, direct or indirect, to cause the
direction or management of such entity, whether by contract or
otherwise, or (ii) ownership of fifty percent (50%) or more of the
outstanding shares, or (iii) beneficial ownership of such entity.</simpara>
</listitem>
<listitem>
<simpara>"Contribution" shall mean any original work of authorship,
including any modifications or additions to an existing work, that
is intentionally submitted by You to jPOS.org for inclusion
in, or documentation of, any of the products owned or managed by
jPOS.org (the "Work"). For the purposes of this definition,
"submitted" means any form of electronic, verbal, or written
communication sent to jPOS.org or its representatives,
including but not limited to communication on electronic mailing
lists, source code control systems, and issue tracking systems that
are managed by, or on behalf of, jPOS.org for the purpose of
discussing and improving the Work, but excluding communication that
is conspicuously marked or otherwise designated in writing by You
as "Not a Contribution."</simpara>
</listitem>
<listitem>
<simpara>Grant of Copyright License. Subject to the terms and conditions of
this Agreement, You hereby grant to jPOS.org and to
recipients of software distributed by jPOS.org a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
copyright license to reproduce, prepare derivative works of,
publicly display, publicly perform, sublicense, and distribute Your
Contributions and such derivative works.</simpara>
</listitem>
<listitem>
<simpara>Grant of Patent License. Subject to the terms and conditions of
this Agreement, You hereby grant to jPOS.org and to
recipients of software distributed by jPOS.org a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
(except as stated in this section) patent license to make, have
made, use, offer to sell, sell, import, and otherwise transfer the
Work, where such license applies only to those patent claims
licensable by You that are necessarily infringed by Your
Contribution(s) alone or by combination of Your Contribution(s)
with the Work to which such Contribution(s) was submitted. If any
entity institutes patent litigation against You or any other entity
(including a cross-claim or counterclaim in a lawsuit) alleging
that your Contribution, or the Work to which you have contributed,
constitutes direct or contributory patent infringement, then any
patent licenses granted to that entity under this Agreement for
that Contribution or Work shall terminate as of the date such
litigation is filed.</simpara>
</listitem>
<listitem>
<simpara>You represent that you are legally entitled to grant the above
license. If your employer(s) has rights to intellectual property
that you create that includes your Contributions, you represent
that you have received permission to make Contributions on behalf
of that employer, that your employer has waived such rights for
your Contributions to jPOS.org, or that your employer has
executed a separate Corporate CLA with jPOS.org.</simpara>
</listitem>
<listitem>
<simpara>You represent that each of Your Contributions is Your original
creation (see section 7 for submissions on behalf of others).  You
represent that Your Contribution submissions include complete
details of any third-party license or other restriction (including,
but not limited to, related patents and trademarks) of which you
are personally aware and which are associated with any part of Your
Contributions.</simpara>
</listitem>
<listitem>
<simpara>You are not expected to provide support for Your Contributions,
except to the extent You desire to provide support. You may provide
support for free, for a fee, or not at all. Unless required by
applicable law or agreed to in writing, You provide Your
Contributions on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
OF ANY KIND, either express or implied, including, without
limitation, any warranties or conditions of TITLE, NON-
INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.</simpara>
</listitem>
<listitem>
<simpara>Should You wish to submit work that is not Your original creation,
You may submit it to jPOS.org separately from any
Contribution, identifying the complete details of its source and of
any license or other restriction (including, but not limited to,
related patents, trademarks, and license agreements) of which you
are personally aware, and conspicuously marking the work as
"Submitted on behalf of a third-party: [named here]".</simpara>
</listitem>
<listitem>
<simpara>You agree to notify jPOS.org of any facts or circumstances of
which you become aware that would make these representations
inaccurate in any respect.</simpara>
</listitem>
</orderedlist>
<simpara>Date:</simpara>
<simpara>Please sign:</simpara>
<simpara>Name:</simpara>
<simpara>Title:</simpara>
</informalexample>
</appendix>
<appendix xml:id="appendix_CCLA">
<title>Corporate CLA</title>
<informalexample role="license">
<simpara>jPOS Project
Corporate Contributor License Agreement V1.0
based on <link xl:href="http://www.apache.org/licenses/">http://www.apache.org/licenses/</link></simpara>
<simpara>Thank you for your interest in the jPOS project by Alejandro P. Revilla
(Uruguayan company #212 752 380 016) conducting business as the jPOS Organization
(jPOS.org).</simpara>
<simpara>In order to clarify the intellectual property license granted with
Contributions from any person or entity, jPOS.org must have a Contributor
License Agreement ("CLA") that has been signed by each Contributor, indicating
agreement to the license terms below.</simpara>
<simpara>This license is for your protection as a
Contributor as well as the protection of jPOS.org and its users; it does not
change your rights to use your own Contributions for any other purpose.</simpara>
<simpara>If you have not already done so, please complete this agreement and
commit it to the jPOS repository at
<link xl:href="https://github.com/jpos/jPOS">https://github.com/jpos/jPOS</link> at legal/cla-USERNAME.txt using
your authenticated SourceForge login. If you do not have commit
privilege to the repository, please email the file to <link xl:href="mailto:license@jpos.org">license@jpos.org</link>.
If possible, digitally sign the committed file, otherwise also send a
signed Agreement to jPOS.org.</simpara>
<simpara>Please read this document carefully before signing and keep a copy for
your records.</simpara>
<informaltable frame="none" rowsep="1" colsep="1">
<tgroup cols="2">
<colspec colname="col_1" colwidth="25*"/>
<colspec colname="col_2" colwidth="75*"/>
<tbody>
<row>
<entry align="left" valign="top"><simpara>Full Name</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>E-Mail</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
<row>
<entry align="left" valign="top"><simpara>Mailing Address:</simpara></entry>
<entry align="left" valign="top"></entry>
</row>
</tbody>
</tgroup>
</informaltable>
<simpara>You accept and agree to the following terms and conditions for Your
present and future Contributions submitted to jPOS.org. In return,
jPOS.org shall not use Your Contributions in a way that is
contrary to the software license in effect at the time of the
Contribution.  Except for the license granted herein to jPOS.org
and recipients of software distributed by jPOS.org, You reserve
all right, title, and interest in and to Your Contributions.</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara><emphasis role="strong">Definitions.</emphasis> "You" (or "Your") shall mean the copyright owner
or legal entity authorized by the copyright owner that is making this
Agreement with jPOS.org. For legal entities, the entity making a
Contribution and all other entities that control, are controlled
by, or are under common control with that entity are considered to
be a single Contributor. For the purposes of this definition,
"control" means (i) the power, direct or indirect, to cause the
direction or management of such entity, whether by contract or
otherwise, or (ii) ownership of fifty percent (50%) or more of the
outstanding shares, or (iii) beneficial ownership of such entity.</simpara>
</listitem>
<listitem>
<simpara>"Contribution" shall mean any original work of authorship,
including any modifications or additions to an existing work, that
is intentionally submitted by You to jPOS.org for inclusion
in, or documentation of, any of the products owned or managed by
jPOS.org (the "Work"). For the purposes of this definition,
"submitted" means any form of electronic, verbal, or written
communication sent to jPOS.org or its representatives,
including but not limited to communication on electronic mailing
lists, source code control systems, and issue tracking systems that
are managed by, or on behalf of, jPOS.org for the purpose of
discussing and improving the Work, but excluding communication that
is conspicuously marked or otherwise designated in writing by You
as "Not a Contribution.".</simpara>
</listitem>
<listitem>
<simpara>Grant of Copyright License. Subject to the terms and conditions of
this Agreement, You hereby grant to jPOS.org and to
recipients of software distributed by jPOS.org a perpetual,
worldwide, non-exclusive, no-charge, royalty-free, irrevocable
copyright license to reproduce, prepare derivative works of,
publicly display, publicly perform, sublicense, and distribute Your
Contributions and any derived works.</simpara>
</listitem>
<listitem>
<simpara>Grant of Patent License. Subject to the terms and conditions of this
Agreement, You hereby grant to jPOS.org and to the recipients of software
distributed by jPOS.org a perpetual, worldwide, non-exclusive, no-charge,
royalty-free, irrevocable (except as stated in this section) patent license to
make, have made, use, offer to sell, sell, import, and otherwise transfer the
Work, where such license applies only to those patent claims licensable by You
that are necessarily infringed by Your Contribution(s) alone or by combination
of Your Contribution(s) with the Work to which such Contribution(s) was
submitted. If any entity institutes patent litigation against You or any other
entity (including a cross-claim or counterclaim in a lawsuit) alleging that
your Contribution, or the Work to which you have contributed, constitutes
direct or contributory patent infringement, then any patent licenses granted to
that entity under this Agreement for that Contribution or Work shall terminate
as of the date such litigation is filed.</simpara>
</listitem>
<listitem>
<simpara>You represent that you are legally entitled to grant the above license. If
your employer(s) has rights to intellectual property that you create that
includes your Contributions, you represent that you have received permission to
make Contributions on behalf of that employer, that your employer has waived
such rights for your Contributions to jPOS.org, or that your employer has
executed a separate Corporate CLA with jPOS.org.</simpara>
</listitem>
<listitem>
<simpara>You represent that each of Your Contributions is Your original creation (see
section 7 for submissions on behalf of others). You represent that Your
Contribution submissions include complete details of any third-party license or
other restriction (including, but not limited to, related patents and
trademarks) of which you are personally aware and which are associated with any
part of Your Contributions.</simpara>
</listitem>
<listitem>
<simpara>You are not expected to provide support for Your Contributions, except to
the extent You desire to provide support. You may provide support for free, for
a fee, or not at all. Unless required by applicable law or agreed to in
writing, You provide Your Contributions on an "AS IS" BASIS, WITHOUT WARRANTIES
OR CONDITIONS OF ANY KIND, either express or implied, including, without
limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT,
MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE.</simpara>
</listitem>
<listitem>
<simpara>Should You wish to submit work that is not Your original creation, You may
submit it to jPOS.org separately from any Contribution, identifying the
complete details of its source and of any license or other restriction
(including, but not limited to, related patents, trademarks, and license
agreements) of which you are personally aware, and conspicuously marking the
work as "Submitted on behalf of a third-party: [named here]".</simpara>
</listitem>
<listitem>
<simpara>You agree to notify jPOS.org of any facts or circumstances of which you
become aware that would make these representations inaccurate in any respect.</simpara>
</listitem>
</orderedlist>
<simpara>Date:</simpara>
<simpara>Please sign:</simpara>
<simpara>Name:</simpara>
<simpara>Title:</simpara>
</informalexample>
</appendix>
</part>
</book>